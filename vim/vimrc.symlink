" =============================================================================
"
"   ┌┬┐┌─┐┌─┐┌─┐┬  ┬┌┬┐┬ ┬┬┌─┐
"   │││├┤ │ ┬├─┤│  │ │ ├─┤││   :: DOTFILES > vimrc
"   ┴ ┴└─┘└─┘┴ ┴┴─┘┴ ┴ ┴ ┴┴└─┘
"   Brought to you by: Seth Messer / @megalithic
"
" -----------------------------------------------------------------------------
" Table of Contents
" -----------------------------------------------------------------------------
" 1) Plugins / Config #plugins
"   1.1) UI
"   1.2) Utilities
"   1.3) Filetypes
"   1.4) Code Navigation
"     1.4.1) Text objects
" 2) Main Settings #msettings
"   2.1) UI
"   2.2) Behavior
"   2.3) *Needs more work and organizing and documentation
" 3) Highlighting #highlights
" 4) Custom functions #cfunctions
" 5) Auto Commands #autocommands
"   5.1) Filetypes
"   5.2) Normalization
" 6) Filetypes #ftypes
" 7) Keybindings #bindings
" =============================================================================

filetype off
set nocompatible

" =============================================================================
" Plugins / Config #plugins
" -----------------------------------------------------------------------------
function! LoadPlugs()
  """"" UI ==================================================================
  Plug 'chriskempson/base16-vim'
  Plug 'roman/golden-ratio'
  Plug 'bling/vim-airline'
    set laststatus=2 " so we always get airline displaying / always show status
    let g:airline_enable_branch=1
    let g:airline_enable_syntastic=1
    let g:airline_theme='wombat'
    let g:airline_powerline_fonts = 1
    let g:airline_left_sep = ''
    let g:airline_right_sep = ''
    let g:airline_linecolumn_prefix = '␊ '
    let g:airline_linecolumn_prefix = '␤ '
    let g:airline_linecolumn_prefix = '¶ '
    let g:airline_branch_prefix = '⎇ '
    let g:airline_paste_symbol = 'ρ'
    let g:airline_paste_symbol = 'Þ'
    let g:airline_paste_symbol = '∥'
    let g:airline#extensions#tabline#enabled = 0
    let g:airline_mode_map = {
          \ 'n' : 'N',
          \ 'i' : 'I',
          \ 'R' : 'REPLACE',
          \ 'v' : 'VISUAL',
          \ 'V' : 'V-LINE',
          \ 'c' : 'CMD   ',
          \ '': 'V-BLCK',
          \ }
  Plug 'scrooloose/syntastic'
    let g:syntastic_javascript_jshint_args = '--config ' . $HOME . '/.jshintrc'
    let g:syntastic_enable_signs = 1 " slow downs
    let g:syntastic_check_on_open = 0 " slow downs
    let g:syntastic_disabled_filetypes = ['html', 'rst']
    let g:syntastic_stl_format = '[%E{%e Errors}%B{, }%W{%w Warnings}]'
    let g:syntastic_jsl_conf = '$HOME/.vim/jsl.conf'
    let g:syntastic_javascript_checkers = ['jshint', 'jsxhint']
    let g:syntastic_haml_checkers = ['haml_lint']
    let g:syntastic_ruby_checkers = ['rubocop']
    let g:syntastic_scss_checkers = ['scss_lint']
    let g:syntastic_error_symbol='✖' "
    let g:syntastic_warning_symbol='⚑'
    let g:syntastic_html_tidy_ignore_errors=[" proprietary attribute \"ng-"]
    let g:syntastic_always_populate_loc_list = 1
    let g:syntastic_javascript_jshint_exec = '/usr/local/bin/jshint'
    let g:syntastic_quiet_messages = { "type": "style" }
    let g:syntastic_mode_map = { 'mode': 'passive', 'active_filetypes': [], 'passive_filetypes': [] }
  Plug 'farseer90718/Rainbow-Parentheses-Improved-and2'
    let g:rainbow_active = 1

  """"" Utilities ===========================================================
  Plug 'tomtom/tcomment_vim'
  Plug 'sickill/vim-pasta'
  Plug 'zaiste/tmux.vim'
  Plug 'haya14busa/incsearch.vim'
  Plug 'jordwalke/VimAutoMakeDirectory'
  Plug 'Raimondi/delimitMate'
  Plug 'tpope/vim-endwise'
  Plug 'tpope/vim-unimpaired'
  Plug 'tpope/vim-eunuch'
  Plug 'tpope/vim-surround'
  Plug 'tpope/vim-repeat'

  Plug 'skalnik/vim-vroom'
    let g:vroom_use_colors=1
    let g:vroom_map_keys = 0
  Plug 'tpope/vim-fugitive'
    augroup ft_fugitive
      au!
      au BufNewFile,BufRead .git/index setlocal nolist
      " Automatically remove fugitive buffers
      autocmd BufReadPost fugitive://* set bufhidden=delete
    augroup END

    autocmd BufReadCmd *.git/index exe BufReadIndex()
    autocmd BufEnter *.git/index silent normal gg0j

    autocmd BufEnter *.git/COMMIT_EDITMSG exe BufEnterCommit()
  Plug 'mattn/webapi-vim'
  Plug 'mattn/gist-vim'
    let g:gist_open_browser_after_post = 1
    let g:gist_detect_filetype = 2
    let g:gist_post_private = 1
    if has('macunix')
      let g:gist_clip_command = 'pbcopy'
    endif
  Plug 'Valloric/ListToggle'
    let g:lt_location_list_toggle_map = '<F3>'
    let g:lt_quickfix_list_toggle_map = '<F4>'

  """"" Filetypes ===========================================================
  """"""" Ruby
  Plug 'vim-ruby/vim-ruby'
  Plug 'tpope/vim-rails'
  Plug 'tpope/vim-rake'

  """"""" Misc
  Plug 'tpope/vim-git'
  Plug 'tpope/vim-markdown'
    let g:markdown_fenced_languages = ['ruby', 'html', 'javascript', 'css', 'erb=eruby.html', 'bash=sh', 'sh']
    autocmd BufNewFile,BufReadPost *.md,*.markdown set filetype=markdown
    autocmd FileType markdown set tw=80

  """"""" JavaScript
  Plug 'mxw/vim-jsx'
  Plug 'pangloss/vim-javascript'
  Plug 'jelera/vim-javascript-syntax'
  Plug 'othree/javascript-libraries-syntax.vim'
  Plug 'elzr/vim-json'
  Plug 'glanotte/vim-jasmine'
  Plug 'lukaszb/vim-web-indent'
  Plug 'Shutnik/jshint2.vim'
  Plug 'burnettk/vim-angular'
    " src / test directions should be set in project .vimrc

  """"""" CSS/Preprocessors
  Plug 'othree/html5.vim'
  Plug 'aaronjensen/vim-sass-status'
  Plug 'cakebaker/scss-syntax.vim'
  Plug 'hail2u/vim-css3-syntax'
  Plug 'groenewege/vim-less'
  Plug 'tpope/vim-haml'

  """"" Code Navigation======================================================
  """"""" Text objects
  Plug 'wellle/targets.vim'
  Plug 'kana/vim-textobj-function'
  Plug 'kana/vim-textobj-user'
  Plug 'mattn/vim-textobj-url'
  Plug 'nelstrom/vim-textobj-rubyblock'
  Plug 'whatyouhide/vim-textobj-xmlattr'

  Plug 'tpope/vim-vinegar' " navigate up a directory with '-' in netrw, among other things
  Plug 'ervandew/supertab'
    let g:SuperTabLongestHighlight = 1
    let g:SuperTabCrMapping = 0
    let g:SuperTabDefaultCompletionType = '<C-n>'
  Plug 'FelikZ/ctrlp-py-matcher'
  Plug 'kien/ctrlp.vim'
    let g:ctrlp_match_window_bottom = 1    " Show at bottom of window
    let g:ctrlp_working_path_mode = 'ra'   " Our working path is our VCS project or the current directory
    let g:ctrlp_mru_files = 1              " Enable Most Recently Used files feature
    let g:ctrlp_jump_to_buffer = 2         " Jump to tab AND buffer if already open
    let g:ctrlp_open_new_file = 'v'        " open selections in a vertical split
    let g:ctrlp_open_multiple_files = 'vr' " opens multiple selections in vertical splits to the right
    let g:ctrlp_arg_map = 0
    let g:ctrlp_dotfiles = 0               " do not show (.) dotfiles in match list
    let g:ctrlp_showhidden = 0             " do not show hidden files in match list
    let g:ctrlp_split_window = 0
    let g:ctrlp_max_height = 40            " restrict match list to a maxheight of 40
    let g:ctrlp_use_caching = 0            " don't cache, we want new list immediately each time
    let g:ctrlp_max_files = 0              " no restriction on results/file list
    let g:ctrlp_working_path_mode = ''
    let g:ctrlp_dont_split = 'NERD_tree_2' " don't split these buffers
    let g:ctrlp_custom_ignore = {
          \ 'dir':  '\v[\/]\.(git|hg|svn|gitkeep)$',
          \ 'file': '\v\.(exe|so|dll|log|gif|jpg|jpeg|png|psd|DS_Store|ctags|gitattributes)$'
          \ }
    " let g:ctrlp_match_func = { 'match': 'pymatcher#PyMatch' }
    " let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
    let g:ctrlp_user_command = 'ag %s -i --nocolor --nogroup --hidden --ignore .git --ignore .svn --ignore .hg --ignore .DS_Store --ignore "**/*.pyc" -g ""'
    " let g:ctrlp_user_command = ['.git/', 'cd %s && git ls-files --exclude-standard -co']
    let g:ctrlp_prompt_mappings = {
          \ 'AcceptSelection("e")': ['<c-e>', '<c-space>', '<2-LeftMouse>'],
          \ 'AcceptSelection("h")': ['<c-x>', '<c-cr>', '<c-s>'],
          \ 'AcceptSelection("t")': ['<c-t>'],
          \ 'AcceptSelection("v")': ['<cr>', '<RightMouse>'],
          \ 'PrtSelectMove("j")':   ['<c-j>', '<down>', '<s-tab>'],
          \ 'PrtSelectMove("k")':   ['<c-k>', '<up>', '<tab>'],
          \ 'PrtHistory(-1)':       ['<c-n>'],
          \ 'PrtHistory(1)':        ['<c-p>'],
          \ 'ToggleFocus()':        ['<c-tab>'],
          \}
  Plug 'rking/ag.vim'
    let g:ackprg="ag --column --nogroup"
    let g:agprg="ag --column --nogroup --line-numbers"
    set grepprg=ag\ --nogroup\ --line-numbers\ --column\ --noheading
  Plug 'inside/vim-search-pulse'
    let g:vim_search_pulse_mode = 'cursor_line'

  """"" Snippets ============================================================
  " Snippets information (handy!):
  " https://medium.com/brigade-engineering/sharpen-your-vim-with-snippets-767b693886db
  " Make keybindings play nice with YCM, Supertab, Ultisnips:
  " http://stackoverflow.com/questions/14896327/ultisnips-and-youcompleteme/22253548#22253548
  " Plug 'SirVer/ultisnips'
  "   let g:UltiSnipsExpandTrigger="<tab>"
  "   let g:UltiSnipsListSnippets="<c-tab>"
  "   let g:UltiSnipsJumpForwardTrigger="<tab>"
  "   let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
  "   let g:UltiSnipsSnippetsDir=["UltiSnips"]
  " Plug 'matthewsimo/angular-vim-snippets'

  Plug 'vim-scripts/matchit.zip'
endfunction

""""" Install vim-plug Plugins (fail nicely) ====================================
try
  call plug#begin()
  call LoadPlugs()
  call plug#end()
  :catch /^Vim\%((\a\+)\)\=:E117/
  echomsg "Failed to load vim-plug and/or bundles. Perhaps vim-plg isn't installed."
  echomsg "You need to install vim-plug into ~/.vim/autoload: "
  echomsg "   mkdir -p ~/.vim/autoload"
  echomsg "   curl -fLo ~/.vim/autoload/plug.vim https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim"
  echomsg "   vim -c ':PlugInstall' -c ':qa!'"
endtry

" Enable built-in matchit plugin
runtime macros/matchit.vim


" =============================================================================
" Main Settings #msettings
" -----------------------------------------------------------------------------
""""" UI ====================================================================
""""""" Theme / Terminal
colorscheme base16-eighties
let base16colorspace=256  " Access colors present in 256 colorspac
set background=dark

filetype plugin indent on
syntax enable
syntax on

set t_Co=256
" in case t_Co alone doesn't work, add this as well:
let &t_AB="\e[48;5;%dm"
let &t_AF="\e[38;5;%dm"
set t_ut= " improve screen clearing by using the background color

set enc=utf-8
set term=screen-256color
let $TERM='screen-256color'

set shell=/usr/local/bin/zsh\ --login

""""""" Layout
set linebreak
set nowrap " off is 'nowrap'
set wrapscan
set synmaxcol=800 " turn off syntax highlight beyond 800 chars
set textwidth=79
set showcmd " show incomplete commands
set ruler " show the cursor position all the time
set scrolloff=5
set sidescroll=1
set sidescrolloff=10
set cul " turn on cursorline highlighting -- needed for linenumber hl too
set listchars=tab:▸\ ,eol:¬,extends:❯,precedes:❮,trail:·,nbsp:⚋
set diffopt=filler " Add vertical spaces to keep right and left aligned.
set diffopt+=iwhite " Ignore whitespace changes.
set noerrorbells
set novisualbell
set number
set splitbelow

" change vim cursor depending on the mode
if exists('$TMUX')
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
  let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif

" Prevent Vim from clobbering the scrollback buffer. See
" http://www.shallowsky.com/linux/noaltscreen.html
set t_ti= t_te=

""""" Behavior ==============================================================
""""""" Swaps / Backups / Sessions / History
set undodir=/tmp
set undofile
set undoreload=500
set undolevels=500

if !strlen($SUDO_USER) && has("unix")
  " Don't store swaps in . -- store in ~/.vim/tmp/swap/%path%to%orig.swp
  set directory=~/.vim/tmp/swap//,.,/var/tmp
  " Don't store backups in . -- store in ~/.vim/tmp/backup/%path%to%orig~
  set backupdir=~/.vim/tmp/backup//,.,/var/tmp
  " Create tmp/ dir if it doesn't exist
  if !isdirectory($HOME."/.vim/tmp") && exists("*mkdir")
    call mkdir($HOME."/.vim/tmp/swap", "p", 0700)
    call mkdir($HOME."/.vim/tmp/backup", "p", 0700)
  endif
else
  set nobackup
  set nowritebackup
  set noswapfile
endif

set sessionoptions-=options " Do not save settings and mappings to sessions
set history=100

""""""" Indentions / Tabs
set autoindent
set smartindent
set cindent
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab

""""""" Grepping / Searching
set ignorecase
set smartcase
set incsearch
set showmatch
set hlsearch
set gdefault " assume the /g flag is on in :s substitutions

""""""" Completions
set ofu=syntaxcomplete#Complete " Set omni-completion method.
set completeopt=longest,menuone,preview
set omnifunc=syntaxcomplete#Complete
set completefunc=syntaxcomplete#Complete
set complete=.,w,b,u,U,t,i,d

""""""" Ignores
set wildmenu
set wildmode=list:longest
set wildignore+=*.jpg,*.jpeg,*.gif,*.png,*.gif,*.psd,*.o,*.obj,*.min.js
set wildignore+=*/smarty/*,*/vendor/*,*/node_modules/*,*/.git/*,*/.hg/*,*/.svn/*,*/.sass-cache/*,*/log/*,*/tmp/*,*/build/*,*/ckeditor/*,*/expert/*,*/solr/*,*/dist/*,*/bower_components/*,*/cf/*
set wildignore+=log/**,node_modules/**,target/**,tmp/**,*.rbc
set wildignore+=*.aux,*.out,*.toc                " latex intermediate files
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg   " binary images
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest " compiled object files
set wildignore+=*.spl                            " compiled spelling word lists
set wildignore+=*.sw?                            " vim swap files
set wildignore+=*.ds_store                       " osx
set wildignore+=*.luac                           " lua byte code
set wildignore+=migrations                       " django migrations
set wildignore+=*.pyc                            " python byte code
set wildignore+=*.orig                           " merge resolution files
set wildignore+=classes
set wildignore+=lib

""""""" File handling
set ttyfast
set autowrite
set autoread
set fileformats=unix,mac,dos
set lazyredraw "may be the cause of lots of issues

""""""" Mode change speedups
set noesckeys
set timeout
set timeoutlen=100
set ttimeout
set ttimeoutlen=1

""""""" Misc (Needs documentation / understanding)
set fcs=fold:-
set matchtime=3
set showbreak=↪
set report=0 " Show all changes.
set hidden
set backspace=indent,eol,start
set shiftround
" set formatoptions=qrn1 " automatic formating.
set formatoptions-=o " don't start new lines w/ comment leader on pressing 'o'
set formatoptions-=r " don't start new lines w/ comment leader on pressing 'o'
set shortmess=atI " don't show the intro message when starting vim.
set matchpairs+=<:>
set virtualedit+=block
set nofoldenable " dont fold by default
set magic
set mat=2
set re=1
set t_vb=
set tm=500

" add system clipboard support
set clipboard+=unnamed
if has('nvim')
  set unnamedclip
endif

" treat certain characters as full keyword boundaries, e.g. `-`
set iskeyword+=-

" if more than 1 files are passed to vim as arg, open them in vertical splits
if argc() > 1
  silent vertical all
endif

""""""" Per project/folder vim settings
set exrc
set secure " disable unsafe commands in local .vimrc files

""""""" Why do I even have these settings? Please clean.
let g:JSHintHighlightErrorLine = 1
let javascript_fold = 1
let loaded_matchit = 1
let ruby_fold = 1
let g:js_indent_log = 1
let javascript_enable_domhtmlcss=1


" =============================================================================
" Highlighting #highlights
" -----------------------------------------------------------------------------
au BufEnter *.rb syn match ExtraWhitespace contained "\<binding.pry\>"
au BufEnter *.js syn match ExtraWhitespace contained "\<debugger\>"
au ColorScheme * hi ExtraWhitespace ctermbg=red guibg=red
au Syntax * syn match ExtraWhitespace /\s\+$\| \+\ze\\t/

hi ColorColumn ctermfg=232 ctermbg=238 guibg=#262626
hi ExtraWhitespace ctermbg=red guibg=red
hi SyntasticError ctermbg=red term=bold
hi CursorLineNr term=bold ctermbg=144

" better tmate UX for other pairers ⇊
hi CursorLine ctermbg=none
hi NonText ctermfg=24
hi SpecialKey ctermfg=24 guibg=NONE
hi Search term=underline ctermbg=144

match ErrorMsg '^\(<\|=\|>\)\{7\}\([^=].\+\)\?$'
" match ExtraWhitespace /\s\+$/
match ExtraWhitespace /\s\+\%#\@<!$/
" match OverLength /\%80v.\+/


" =============================================================================
" Custom Functions #cfunctions
" -----------------------------------------------------------------------------
" Used by Fugitive
function! BufReadIndex()
  " Use j/k in status
  setlocal nohlsearch
  nnoremap <buffer> <silent> j :call search('^#\t.*','W')<Bar>.<CR>
  nnoremap <buffer> <silent> k :call search('^#\t.*','Wbe')<Bar>.<CR>
endfunction

" Used by Fugitive
function! BufEnterCommit()
  " Start in insert mode for commit
  normal gg0
  if getline('.') == ''
    start
  end
  " force spell when doing a git commit
  if  bufname("%")=="COMMIT_EDITMSG"
      set spell
      set spelllang=en
  endif
endfunction

" Delete trailing white space on save, useful for Python and CoffeeScript ;)
function! DeleteTrailingWS()
  exe "normal mz"
  %s/\s\+$//ge
  exe "normal `z"
endfunction

" prevent replacing paste buffer on paste:
" vp doesn't replace paste buffer
function! RestoreRegister()
  let @" = s:restore_reg
  return ''
endfunction
function! s:Repl()
  let s:restore_reg = @"
  return "p@=RestoreRegister()\<cr>"
endfunction

" Neovim support system clipboard in OSX
function! ClipboardYank()
  call system('pbcopy', @@)
endfunction
function! ClipboardPaste()
  let @@ = system('pbpaste')
endfunction


" =============================================================================
" Autocommands #autocommands
" -----------------------------------------------------------------------------
if exists('+colorcolumn')
  augroup UnSyntaxInactive
    au!
    au WinEnter * set number
    au BufWinEnter * set syntax=ON
    au BufEnter * set syntax=ON
    au WinEnter * set syntax=ON

    au BufWinLeave * set syntax=OFF
    au BufLeave * set syntax=OFF
    au WinLeave * set syntax=OFF
    au WinLeave * set nonumber
  augroup END
endif

augroup Tmux
  au!
  au VimEnter,BufNewFile,BufReadPost * call system('tmux rename-window "vim - ' . split(substitute(getcwd(), $HOME, '~', ''), '/')[-1] . '"')
  au VimLeave * call system('tmux rename-window ' . split(substitute(getcwd(), $HOME, '~', ''), '/')[-1])
augroup END

augroup ReturnToLastEditedLine
  au!
  au BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \     execute 'normal! g`"zvzz' |
    \ endif
augroup END

" Delete trailing whitespace on write
au BufWrite * silent call DeleteTrailingWS()

" Resize splits when the window is resized
au VimResized * :wincmd =

" No line numbers in the cmd window
au CmdwinEnter * set nonumber

" Color Column (only on insert)
if exists("&colorcolumn")
  autocmd InsertEnter * set colorcolumn=80
  autocmd InsertLeave * set colorcolumn=""
endif


" =============================================================================
" Filetypes / Syntax #ftypes
" -----------------------------------------------------------------------------
augroup filetypes
  " clear commands before resetting
  autocmd!

  " Markdown turn off lazyredraw
  autocmd BufNewFile,BufRead *.md,*.mdown,*.markdown set nolazyredraw filetype=markdown
  autocmd BufNewFile,BufRead *.md,*.mdown,*.markdown set filetype=markdown

  " filetype
  autocmd BufNewFile,BufRead *.json set filetype=json
  autocmd BufNewFile,BufRead *.slim set filetype=slim
  autocmd BufNewFile,BufRead *.less set filetype=less
  autocmd BufNewFile,BufRead *.scss set filetype=sass

  autocmd BufNewFile,BufRead,BufWritePost *[Ss]pec*js,*SpecHelper*js set filetype=jasmine.javascript syntax=jasmine

  " Enable omnicomplete for supported filetypes
  autocmd FileType css,scss,sass,less setlocal omnifunc=csscomplete#CompleteCSS
  autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
  autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS

  " jscomplete is a separate plugin
  autocmd FileType javascript setlocal omnifunc=jscomplete#CompleteJS
  autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
  autocmd FileType xml exe ":silent 1,$!xmllint --format --recover - 2>/dev/null"

  " make `gf` search for .js files
  autocmd FileType javascript setlocal suffixesadd=.js
  autocmd FileType javascript setlocal path+=js,scripts

  " make sure `complete` works as expected for CSS class names whithout
  " messing with motions (eg. '.foo-bar__baz') and we make sure all
  " delimiters (_,-,$,%,.) are treated as word separators outside insert mode
  autocmd InsertEnter,BufLeave * setl iskeyword=@,48-57,192-255,\@,\$,%,-,_
  autocmd InsertLeave,BufEnter * setl iskeyword=@,48-57,192-255

  " " JSX
  " " https://github.com/lencioni/dotfiles/blob/master/.vim/ftdetect/jsx.vim
  " function! s:ScanFile()
  "   let n = 1
  "   let nmax = line("$")
  "   if line("$") > 500
  "     let nmax = 500
  "   endif
  "   while n < nmax
  "     if getline(n) =~ "\\v<React\\.|<jsx>"
  "       return 1
  "       break
  "     endif
  "     let n = n + 1
  "   endwhile
  "   return 0
  " endfunction
  "
  " function! s:DetectJSX(file)
  "   if a:file =~ "\\v\\.html""
  "     if s:ScanFile()
  "       set ft=html.jsx
  "     endif
  "   elseif a:file =~ "\\v\\.js""
  "     if s:ScanFile()
  "       set ft=javascript.jsx
  "     endif
  "   endif
  " endfunction
  " autocmd BufNewFile,BufRead *.js.jsx set ft=javascript.jsx
  " autocmd BufNewFile,BufRead *{_spec,Spec}.js.jsx set ft=javascript.jsx.jasmine
  " autocmd BufNewFile,BufRead *.html,*.js call s:DetectJSX(expand("<afile>"))
augroup END


" =============================================================================
" Keybindings #bindings
" TODO: this area needs lots of cleanup and re-evaluation
" -----------------------------------------------------------------------------
let mapleader=","
let maplocalleader="\\"

""""""" CtrlP
let g:ctrlp_map = '<leader>m'
let g:ctrlp_cmd = 'CtrlP'

""""""" Golden Ratio
"create new vertical window split and focus it
" nnoremap <c-n> :vnew<cr>
nnoremap <c-o> :vnew<cr>:e<space><c-d>
nnoremap <c-n> :vsp .<cr>

""""""" Tcomment
nmap <leader>c :TComment<cr>
vmap <leader>c :TComment<cr>

""""""" Vundle
noremap <F5> :PlugUpdate<cr>
map <F5> :PlugUpdate<cr>

""""""" Fugitive
nnoremap <leader>H :Gbrowse<cr>
vnoremap <leader>H :Gbrowse<cr>

""""""" Ag / Ack
nnoremap <leader>a :Ag!<space>
" immediately ag/ack/grep for word under cursor
map <leader>/ :execute "Ag! " . expand("<cword>") <CR>
vmap <leader>/ :execute "Ag! " . S <CR>

""""""" Vroom
silent! map <unique> <Leader>t :VroomRunTestFile<CR>
silent! map <unique> <Leader>T :VroomRunNearestTest<CR>
silent! map <unique> <Leader>l :VroomRunLastTest<CR>

""""""" Gist
" Send visual selection to gist.github.com as a private, filetyped Gist
" Requires the gist command line too (brew install gist)
" vnoremap <leader>G :'<,'>Gist -p -t<cr>
vnoremap <leader>G !gist -p -t %:e \\| pbcopy<cr>

""""""" Gist
nnoremap <leader>e :SyntasticToggleMode<cr> :SyntasticCheck<cr>

""""""" Surround
vmap [ S]
vmap ( S)
vmap { S}
" vmap ] S[
" vmap ) S(
" vmap } S{
vmap ' S'
vmap " S"

""""""" Code Formatting
map <leader>pj :%!python -m json.tool<CR>
map <leader>px :%!xmllint % --format<CR>

""""""" Quick edit of certain files
nnoremap <leader>ev :vsplit $MYVIMRC<cr>
nnoremap <leader>ez :vsplit ~/.zshrc<cr>

""""""" Tab manipulation
" Make opening files in a new tab easier
nmap <C-t> :tabnew<space>
nmap <C-e> :edit<space> <C-d>

""""""" Motions
noremap j gj
noremap k gk
noremap gj j
noremap gk k

""""""" Split movement
map <C-j> <Nop>
map <C-k> <Nop>
unmap <C-j>
unmap <C-k>
map <C-h> <Nop>
map <C-l> <Nop>
unmap <C-h>
unmap <C-l>
"now, remap them
nnoremap <C-l> <C-W>w
nnoremap <C-h> <C-W>W

""""""" Just say no to drugs
" disable arrow keys
nmap <Up> <Nop>
nmap <Down> <Nop>
vmap <Up> <Nop>
vmap <Down> <Nop>
nmap <Left> <Nop>
nmap <Right> <Nop>
vmap <Left> <Nop>
vmap <Right> <Nop>
" this always does annoying things for some reason, so stop it
noremap K <nop>
" stop changing casing when in visual mode
vnoremap u <nop>

""""""" Writing / quitting
nnoremap <leader>w :w<cr>
nnoremap <leader>q :q<cr>
" Sudo write (,W)
noremap <silent><leader>W :w !sudo tee %<CR>

""""""" Vim process management
" background VIM
vnoremap <c-z> <esc>zv`<ztgv

""""""" Search / Substitutions / Replacements
nnoremap <silent><Leader><space> :nohls<CR>
nnoremap / /\v
vnoremap / /\v
" Keep search matches in the middle of the window.
nnoremap <silent> n nzzzv
nnoremap <silent> N Nzzzv
" Keep search matches jumping around
nnoremap g; g;zz
nnoremap g, g,zz
" Search and replace word under cursor (,*)
" nnoremap <leader>fr :%s/\<<C-r><C-w>\>//<Left>
nnoremap <leader>fr :%s#\<<C-r>=expand("<cword>")<CR>\>#
" Use word under cursor into lhs of a substitute (for quick search and replace)
nnoremap <leader>r :%s/\<<C-r>=expand("<cword>")<CR>\>/

""""""" Copy/Paste
noremap <leader>y "*y
noremap <leader>yy "*Y
"don't move the cursor after pasting
"(by jumping to back start of previously changed text)
noremap p p`[
noremap P P`[
nnoremap Y y$
vmap <silent><leader>y "xy
map <silent><leader>p "xp
vmap <silent> <expr> p <sid>Repl()

" Neovim copy/paste support from system clipboard
if has("nvim")
  vnoremap <silent> y y:call ClipboardYank()<cr>
  vnoremap <silent> d d:call ClipboardYank()<cr>
  nnoremap <silent> p :call ClipboardPaste()<cr>p
endif

""""""" ESC rebindings
inoremap <F1> <ESC>
nnoremap <F1> <ESC>
vnoremap <F1> <ESC>

""""""" Convenience rebindings
" semicolon is easier to hit than colon
nnoremap ; :
" remap q for recording to Q
nnoremap Q q
nnoremap q <Nop>
"allow deleting selection without updating the clipboard (yank buffer)
vnoremap x "_x
vnoremap X "_X
" Easier to type, and I never use the default behavior.
noremap H ^
noremap L $
vnoremap L g_
"make the tab key match bracket pairs
map <tab> %
noremap <tab> %
vnoremap <tab> %
" Better mark jumping (line + col)
nnoremap ' <nop>
" Remap VIM 0 to first non-blank character
map 0 ^

""""""" Selections
" reselect pasted content:
noremap gV `[v`]
" select all text on the page
noremap <leader>v ggVG
" Easier linewise reselection of what you just pasted.
nnoremap <leader>V V`]
" duplicate whatever’s selected, to the next line
vmap D y'>p

""""""" Indentions
" Indent/dedent/autoindent what you just pasted.
nnoremap <lt>> V`]<
nnoremap ><lt> V`]>
nnoremap =- V`]=
" Reindent the whole document and keep the cursor in the same location
nnoremap <C-=> mqHmwgg=G`wzt`q


""""""" Misc (organize this please!)
" Insert newline below
nnoremap <cr><cr> o<ESC>

" Toggle 'keep current line in the center of the screen' mode
nnoremap <leader>C :let &scrolloff=999-&scrolloff<cr>
"
" gi already moves to 'last place you exited insert mode', so we'll map gI to
" something similar: move to last change
nnoremap gI `.

" Make D behave
nnoremap D d$

" Delete a line and not keep it in a register
nnoremap X Vx

" Insert Mode Completion
inoremap <c-f> <c-x><c-f>
inoremap <c-]> <c-x><c-]>

" Redraw my screen
nnoremap U :syntax sync fromstart<cr>:redraw!<cr>

" Select (charwise) the contents of the current line, excluding indentation.
" Great for pasting Python lines into REPLs.
nnoremap vv ^vg_

" Keep the cursor in place while joining lines
nnoremap J mzJ`z

" Split line (sister to [J]oin lines above)
" The normal use of S is covered by cc, so don't worry about shadowing it.
nnoremap S i<cr><esc>^mwgk:silent! s/\v +$//<cr>:noh<cr>`w

" Insert the directory of the current buffer in command line mode
cnoremap <expr> %% getcmdtype() == ':' ? expand('%:h').'/' : '%%'

" Insert mode movements
" Ctrl-e: Go to end of line
inoremap <c-e> <esc>A
" Ctrl-a: Go to begin of line
inoremap <c-a> <esc>I
