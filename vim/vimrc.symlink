" =============================================================================
" A megalithic .vimrc
" Author: Seth Messer <seth.messer@gmail.com>
" -----------------------------------------------------------------------------
" Resources:
" https://github.com/bling/dotvim/blob/master/vimrc
" https://github.com/jm3/dotfiles
" =============================================================================

filetype off
filetype plugin indent on
set nocompatible

" =============================================================================
" Manage plugins with Vundle
" -----------------------------------------------------------------------------

function! LoadBundles()
  " Determine if npm is installed
  let isNpmInstalled = executable("npm")

  " Determine make or gmake will be used for making additional deps for Bundles
  let g:make = 'gmake'
  if system('uname -o') =~ '^GNU/'
    let g:make = 'make'
  endif

  Bundle 'gmarik/vundle'
  Bundle 'chriskempson/base16-vim'
  Bundle 'bling/vim-airline'
  Bundle 'ervandew/supertab'
  Bundle 'kien/ctrlp.vim.git'

  if has("python")
    " Provide smart autocomplete results for javascript, and some useful commands
    Bundle 'marijnh/tern_for_vim'
    " install node dependencies for tern
    if isNpmInstalled && isdirectory(expand('~/.vim/bundle/tern_for_vim')) && !isdirectory(expand('~/.vim/bundle/tern_for_vim/node_modules'))
      silent ! echo 'Installing tern' && npm --prefix ~/.vim/bundle/tern_for_vim install
    endif
  endif

  Bundle 'rking/ag.vim'
  Bundle 'tomtom/tcomment_vim'
  Bundle 'rking/ag.vim'
  Bundle 'tpope/vim-endwise'
  Bundle 'tpope/vim-unimpaired'
  Bundle 'tpope/vim-eunuch'
  Bundle 'tpope/vim-surround'
  Bundle 'tpope/vim-git'
  Bundle 'tpope/vim-fugitive'
  Bundle 'tpope/vim-repeat'
  Bundle 'tpope/vim-rvm'
  Bundle 'tpope/vim-haml'
  Bundle 'tpope/vim-markdown'
  Bundle 'tpope/vim-rails'
  Bundle 'vim-ruby/vim-ruby'
  Bundle 'skalnik/vim-vroom'
  Bundle 'othree/html5.vim'
  " Bundle 'git@github.com:slim-template/vim-slim.git'
  " Bundle 'kchmck/vim-coffee-script'
  Bundle 'pangloss/vim-javascript'
  Bundle 'jelera/vim-javascript-syntax'
  Bundle 'othree/javascript-libraries-syntax.vim'
  Bundle 'mxw/vim-jsx'
  Bundle 'lukaszb/vim-web-indent'
  Bundle 'lfilho/cosco.vim'
  Bundle 'aaronjensen/vim-sass-status'
  Bundle 'cakebaker/scss-syntax.vim'
  Bundle 'groenewege/vim-less'
  Bundle 'hail2u/vim-css3-syntax'
  Bundle 'claco/jasmine.vim'
  Bundle 'mklabs/grunt.vim'
  Bundle 'kien/rainbow_parentheses.vim'
  Bundle 'Valloric/MatchTagAlways'
  Bundle 'Townk/vim-autoclose'
  Bundle 'roman/golden-ratio'
  Bundle 'sickill/vim-pasta'
  Bundle 'tclem/vim-arduino'
  Bundle 'jameslyden/vim-arduino'
  Bundle 'elzr/vim-json'

  " Clojure stuffs
  Bundle 'guns/vim-clojure-static'
  Bundle 'tpope/vim-fireplace'
  Bundle 'tpope/vim-classpath'
  " Bundle 'jpalardy/vim-slime'
  Bundle 'vim-scripts/paredit.vim'
  " Bundle 'jayflo/vim-skip'
  " Bundle 'guns/vim-sexp'

  if exists('*getmatches')
    " Bundle 'scrooloose/syntastic'

    " Install jshint and csslint for syntastic
    " Path to jshint if it not installed globally, then use local installation
    if !executable("jshint")
      let g:syntastic_jshint_exec = '~/.vim/node_modules/.bin/jshint'
      "let g:syntastic_javascript_jshint_exec = '~/.vim/node_modules/.bin/jshint'
      if isNpmInstalled && !executable(expand(g:syntastic_jshint_exec))
        silent ! echo 'Installing jshint' && npm --prefix ~/.vim/ install jshint
      endif
    endif

    " Path to csslint if it not installed globally, then use local installation
    if !executable("csslint")
      let g:syntastic_css_csslint_exec='~/.vim/node_modules/.bin/csslint'
      if isNpmInstalled && !executable(expand(g:syntastic_css_csslint_exec))
        silent ! echo 'Installing csslint' && npm --prefix ~/.vim/ install csslint
      endif
    endif
  endif

  " Bundle '29decibel/vim-stringify'
  " Bundle 'maxbrunsfeld/vim-yankstack'
  " Bundle 'gregsexton/gitv'
  " Bundle 'justinmk/vim-sneak'
  Bundle 'vim-scripts/matchit.zip'
endfunction

try
  set rtp+=~/.vim/bundle/vundle/
  call vundle#rc()
  call LoadBundles()
  :catch /^Vim\%((\a\+)\)\=:E117/
  echomsg "Failed to load vundle and/or bundles. Perhaps vundle isn't installed."
  echomsg "You need to install vundle into ~/.vim/bundle/vundle: "
  echomsg "   git clone http://github.com/gmarik/vundle.git ~/.vim/bundle/vundle"
  echomsg "   vim -c ':BundleInstall' -c ':qa!'"
endtry

runtime macros/matchit.vim
filetype plugin indent on


" =============================================================================
" Main Settings #msettings
" -----------------------------------------------------------------------------
set t_Co=256
set background=dark
syntax enable
colorscheme base16-eighties
syntax on

let mapleader=","
let maplocalleader = "\\"

set enc=utf-8
set term=screen-256color
set ttyfast
set showcmd
set fileformats=unix,mac,dos

set undodir=/tmp
set undofile
set undoreload=500
set undolevels=500

set nobackup
set nowritebackup
set noswapfile

set autoindent
set smartindent
set cindent

" set relativenumber
set number
set ofu=syntaxcomplete#Complete " Set omni-completion method.
" set infercase
set completeopt=longest,menuone,preview
set omnifunc=syntaxcomplete#Complete
set completefunc=syntaxcomplete#Complete
set complete=.,w,b,u,U,t,i,d
set wildmenu
set wildmode=list:longest
set wildignore+=*.jpg,*.jpeg,*.gif,*.png,*.gif,*.psd,*.o,*.obj,*.min.js
set wildignore+=*/smarty/*,*/vendor/*,*/node_modules/*,*/.git/*,*/.hg/*,*/.svn/*,*/.sass-cache/*,*/log/*,*/tmp/*,*/build/*,*/ckeditor/*,*/expert/*,*/solr/*,*/dist/*,*/bower_components/*,*/cf/*
set wildignore+=log/**,node_modules/**,target/**,tmp/**,*.rbc
set wildignore+=*.aux,*.out,*.toc                " latex intermediate files
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg   " binary images
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest " compiled object files
set wildignore+=*.spl                            " compiled spelling word lists
set wildignore+=*.sw?                            " vim swap files
set wildignore+=*.ds_store                       " osx
set wildignore+=*.luac                           " lua byte code
set wildignore+=migrations                       " django migrations
set wildignore+=*.pyc                            " python byte code
set wildignore+=*.orig                           " merge resolution files
set wildignore+=classes
set wildignore+=lib

set report=0 " Show all changes.
set hidden
set backspace=indent,eol,start
set laststatus=2
set history=100
set listchars=tab:▸\ ,eol:¬,extends:❯,precedes:❮,trail:·,nbsp:⚋
set fcs=fold:-
set shell=/usr/local/bin/zsh\ --login
set lazyredraw "may be the cause of lots of issues
set matchtime=3
set showbreak=↪
set splitbelow

set diffopt=filler          " Add vertical spaces to keep right and left aligned.
set diffopt+=iwhite         " Ignore whitespace changes.
" set fillchars=diff:⣿,vert:│
" set fillchars=diff:\|,vert:\|

set timeout
set ttimeoutlen=10
set timeoutlen=100

set autowrite
set autoread
set shiftround
set linebreak
set synmaxcol=800

set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab

set nowrap
set wrap
set wrapscan
set textwidth=79
set formatoptions=qrn1          " automatic formating.
set formatoptions-=or            " don't start new lines w/ comment leader on pressing 'o'
set shortmess=atI " don't show the intro message when starting vim.
" set colorcolumn=+1

set ignorecase
set smartcase
set incsearch
set showmatch
set hlsearch

set matchpairs+=<:>
set gdefault

set ruler
set scrolloff=5
set sidescroll=1
set sidescrolloff=10
set cul "toggle cursorline
" set cuc "toggle cursorcolumn
set virtualedit+=block

" folding settings
set foldopen=block,insert,jump,mark,percent,quickfix,search,tag,undo
set foldlevel=99
set foldlevelstart=99
set foldcolumn=1

set foldmethod=indent   "fold based on indent
set foldnestmax=5       "deepest fold is 3 levels
set nofoldenable        "dont fold by default

set magic
set mat=2

set re=1

set noerrorbells
set novisualbell
set t_vb=
" set t_ti=
" set t_te=
set tm=500
nnoremap / /\v
vnoremap / /\v

" DON'T BE SILLY! NO MEESES HERE!
" if has('mouse')
"   set mouse-=a                   " Enable mouse everywhere.
"   set mousemodel=popup_setpos   " Show a pop-up for right-click.
"   set mousehide                 " Hide mouse while typing.
" endif

" add system clipboard support
set clipboard+=unnamed

" treat certain characters as full keyword boundaries, e.g. `-`
set iskeyword+=-

set exrc   " enable per-directory .vimrc files
set secure " disable unsafe commands in local .vimrc files

" =============================================================================
" Highlighting
" -----------------------------------------------------------------------------
hi ColorColumn ctermbg=237 guibg=#262626
match ErrorMsg '^\(<\|=\|>\)\{7\}\([^=].\+\)\?$'

" Highlight extra white space
hi ExtraWhitespace ctermbg=red guibg=red
autocmd ColorScheme * highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+\%#\@<!$/
" highlight ExtraWhitespace ctermbg=red guibg=red
" autocmd Syntax * syn match ExtraWhitespace /\s\+$\| \+\ze\\t/

highlight SyntasticError guibg=#2f0000 ctermbg=red

hi CursorLineNr term=bold ctermfg=11 ctermbg=blue gui=bold guifg=Yellow

hi NonText guifg=#4a4a59
hi SpecialKey guifg=#4a4a59 guibg=NONE

" Highlight search results
hi Search ctermbg=gray guibg=khaki guifg=black gui=NONE
" hi Search cterm=NONE ctermfg=khaki ctermbg=blue

au BufEnter *.rb syn match error contained "\<binding.pry\>"

" Let us know if we're over the 80 character column
" highlight OverLength ctermbg=gray ctermfg=white guibg=#592929
" match OverLength /\%80v.\+/

" =============================================================================
" Autocommands
" -----------------------------------------------------------------------------
augroup force_save_on_events
    au!
    au InsertLeave * :silent! wall
    au CursorHold * :silent! wall
    au CursorHoldI * :silent! wall
    au FocusLost * :silent! wall
augroup END

augroup Tmux
  au!
  autocmd VimEnter,BufNewFile,BufReadPost * call system('tmux rename-window "vim - ' . split(substitute(getcwd(), $HOME, '~', ''), '/')[-1] . '"')
  autocmd VimLeave * call system('tmux rename-window ' . split(substitute(getcwd(), $HOME, '~', ''), '/')[-1])
augroup END

augroup trailing
  au!
  au InsertEnter * :set listchars-=trail:⌴
augroup END

augroup line_return
  au!
  au BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \     execute 'normal! g`"zvzz' |
    \ endif
augroup END

" Resize splits when the window is resized
au VimResized * :wincmd =

" change vim cursor depending on the mode
if exists('$ITERM_PROFILE')
  if exists('$TMUX')
    let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
    let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
  else
    let &t_SI = "\<Esc>]50;CursorShape=1\x7"
    let &t_EI = "\<Esc>]50;CursorShape=0\x7"
  endif
end

" if more than 1 files are passed to vim as arg, open them in vertical splits
if argc() > 1
  silent vertical all
endif


" =============================================================================
" Plugin Settings #psettings
" -----------------------------------------------------------------------------
" if filereadable(expand("~/.vim/vimrc.pluginsettings.vim"))
"   source ~/.vim/vimrc.pluginsettings.vim
" endif

let g:JSHintHighlightErrorLine = 1
let javascript_fold = 1
let loaded_matchit = 1
let ruby_fold = 1

" -----------------------------------------------------------------------------
" Markdown ------
" let g:markdown_fenced_languages = ['coffee', 'css', 'erb=eruby', 'javascript', 'js=javascript', 'json=javascript', 'ruby', 'sass', 'xml']

" -----------------------------------------------------------------------------
" Airline ------
let g:airline_enable_branch=1
let g:airline_enable_syntastic=1
" let g:airline_powerline_fonts=0
let g:airline_theme='badwolf'
let g:airline_powerline_fonts = 1
let g:airline_left_sep = ''
let g:airline_right_sep = ''
let g:airline_linecolumn_prefix = '␊ '
let g:airline_linecolumn_prefix = '␤ '
let g:airline_linecolumn_prefix = '¶ '
let g:airline_branch_prefix = '⎇ '
let g:airline_paste_symbol = 'ρ'
let g:airline_paste_symbol = 'Þ'
let g:airline_paste_symbol = '∥'
let g:airline#extensions#tabline#enabled = 0
let g:airline_mode_map = {
\ 'n' : 'N',
\ 'i' : 'I',
\ 'R' : 'REPLACE',
\ 'v' : 'VISUAL',
\ 'V' : 'V-LINE',
\ 'c' : 'CMD   ',
\ '': 'V-BLCK',
\ }

" -----------------------------------------------------------------------------
" Rainbow Parenthesis ------
au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces

" -----------------------------------------------------------------------------
" Ag (the_silver_searcher)/Ack ------
let g:ackprg="ag --column --nogroup"
set grepprg=ag\ --nogroup\ --line-numbers\ --column\ --noheading
let g:agprg="ag --column --nogroup --line-numbers"
"
" bind \ (backward slash) to grep shortcut
" http://robots.thoughtbot.com/faster-grepping-in-vim/
" command -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!
"

" -----------------------------------------------------------------------------
" Sneak ------
" let g:sneak#streak = 1
" nmap f <Plug>Sneak_s
" nmap F <Plug>Sneak_S
" xmap f <Plug>Sneak_s
" xmap F <Plug>Sneak_S
" omap f <Plug>Sneak_s
" omap F <Plug>Sneak_S

" -----------------------------------------------------------------------------
" Fugitive ------
augroup ft_fugitive
  au!
  au BufNewFile,BufRead .git/index setlocal nolist
  " Automatically remove fugitive buffers
  autocmd BufReadPost fugitive://* set bufhidden=delete
augroup END

function! BufReadIndex()
  " Use j/k in status
  setlocal cursorline
  setlocal nohlsearch
  nnoremap <buffer> <silent> j :call search('^#\t.*','W')<Bar>.<CR>
  nnoremap <buffer> <silent> k :call search('^#\t.*','Wbe')<Bar>.<CR>
endfunction

autocmd BufReadCmd *.git/index exe BufReadIndex()
autocmd BufEnter *.git/index silent normal gg0j

function! BufEnterCommit()
  " Start in insert mode for commit
  normal gg0
  if getline('.') == ''
    start
  end
  " force spell when doing a git commit
  if  bufname("%")=="COMMIT_EDITMSG"
      set spell
      set spelllang=en
  endif
endfunction
autocmd BufEnter *.git/COMMIT_EDITMSG exe BufEnterCommit()

" -----------------------------------------------------------------------------
" Gist ------
let g:gist_open_browser_after_post = 1
let g:gist_detect_filetype = 1
let g:gist_post_private = 1
if has('macunix')
  let g:gist_clip_command = 'pbcopy'
endif

" -----------------------------------------------------------------------------
" Arduino ------
let g:vim_arduino_map_keys = 0
" nnoremap <leader>rc :call ArduinoCompile()<CR>
" nnoremap <leader>rd :call ArduinoDeploy()<CR>
" nnoremap <leader>rs :call ArduinoSerialMonitor()<CR>

" -----------------------------------------------------------------------------
" Focus ------
let g:focusmode_width = 180

" -----------------------------------------------------------------------------
" Accordion ------
let AccordionAll = 3

" -----------------------------------------------------------------------------
" Unite ------
" can haz?

" -----------------------------------------------------------------------------
" Syntastic ------
let g:syntastic_enable_signs = 1
let g:syntastic_check_on_open = 1
let g:syntastic_disabled_filetypes = ['html', 'rst']
let g:syntastic_stl_format = '[%E{%e Errors}%B{, }%W{%w Warnings}]'
let g:syntastic_jsl_conf = '$HOME/.vim/jsl.conf'
let g:syntastic_javascript_checkers=["jshint"]
let g:syntastic_error_symbol='✗'
let g:syntastic_warning_symbol='⚠'
let g:syntastic_html_tidy_ignore_errors=[" proprietary attribute \"ng-"]
let g:syntastic_always_populate_loc_list=1

" -----------------------------------------------------------------------------
" Slime ------
let g:slime_target = "tmux"

" -----------------------------------------------------------------------------
" Supertab ------
let g:SuperTabLongestHighlight = 1
let g:SuperTabCrMapping = 1

" -----------------------------------------------------------------------------
" YouCompleteMe ------
" let g:ycm_add_preview_to_completeopt=0
" let g:ycm_confirm_extra_conf=0
" let g:ycm_autoclose_preview_window_after_insertion = 1
" let g:ycm_key_list_select_completion = ['<TAB>', '<Down>', '<Enter>']
" set completeopt-=preview

" -----------------------------------------------------------------------------
" CtrlP ------
let g:ctrlp_match_window_bottom = 1 " Show at top of window
let g:ctrlp_working_path_mode = 2 " Smart path mode
let g:ctrlp_mru_files = 1 " Enable Most Recently Used files feature
let g:ctrlp_jump_to_buffer = 2 " Jump to tab AND buffer if already open
let g:ctrlp_open_new_file = 'v'
let g:ctrlp_open_multiple_files = 'vr'
let g:ctrlp_arg_map = 0
let g:ctrlp_dotfiles = 0
let g:ctrlp_showhidden = 0
let g:ctrlp_split_window = 0
let g:ctrlp_max_height = 20
let g:ctrlp_use_caching = 0
let g:ctrlp_dont_split = 'NERD_tree_2'
let g:ctrlp_custom_ignore = {
\ 'dir':  '\v[\/]\.(git|hg|svn|gitkeep)$',
\ 'file': '\v\.(exe|so|dll|log|gif|jpg|jpeg|png|psd|DS_Store|ctags|gitattributes)$'
\ }
let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
let g:ctrlp_prompt_mappings = {
\ 'AcceptSelection("e")': ['<c-e>', '<c-space>', '<2-LeftMouse>'],
\ 'AcceptSelection("h")': ['<c-x>', '<c-cr>', '<c-s>'],
\ 'AcceptSelection("t")': ['<c-t>'],
\ 'AcceptSelection("v")': ['<cr>', '<RightMouse>'],
\ 'PrtSelectMove("j")':   ['<c-j>', '<down>', '<s-tab>'],
\ 'PrtSelectMove("k")':   ['<c-k>', '<up>', '<tab>'],
\ 'PrtHistory(-1)':       ['<c-n>'],
\ 'PrtHistory(1)':        ['<c-p>'],
\ 'ToggleFocus()':        ['<c-tab>'],
\}

" -----------------------------------------------------------------------------
" Vroom ------
let g:vroom_use_colors=1

" =============================================================================
" Custom Functions #cfunctions
" -----------------------------------------------------------------------------
" AutoClose
let g:AutoClosePairs = {'(': ')', '{': '}', '[': ']', '"': '"', "'": "'", '#{': '}'}
let g:AutoCloseProtectedRegions = ["Character"]

" Errors Toggle
command! ErrorsToggle call ErrorsToggle()
function! ErrorsToggle()
  if exists("w:is_error_window")
    unlet w:is_error_window
    exec "q"
  else
    exec "Errors"
    lopen
    let w:is_error_window = 1
  endif
endfunction

" Quickfix Toggle
command! -bang -nargs=? QFixToggle call QFixToggle(<bang>0)
function! QFixToggle(forced)
  if exists("g:qfix_win") && a:forced == 0
    cclose
    unlet g:qfix_win
  else
    copen 10
    let g:qfix_win = bufnr("$")
  endif
endfunction

" Smart TabComplete
function! Smart_TabComplete()
  let line = getline('.')                         " current line

  let substr = strpart(line, -1, col('.')+1)      " from the start of the current
  " line to one character right
  " of the cursor
  let substr = matchstr(substr, "[^ \t]*$")       " word till cursor
  if (strlen(substr)==0)                          " nothing to match on empty string
    return "\<tab>"
  endif
  let has_period = match(substr, '\.') != -1      " position of period, if any
  let has_slash = match(substr, '\/') != -1       " position of slash, if any
  if (!has_period && !has_slash)
    return "\<C-X>\<C-P>"                         " existing text matching
  elseif ( has_slash )
    return "\<C-X>\<C-F>"                         " file matching
  else
    return "\<C-X>\<C-O>"                         " plugin matching
  endif
endfunction

augroup FastEscape
  autocmd!
  au InsertEnter * set timeoutlen=0
  au InsertLeave * set timeoutlen=1000
augroup END

" Dim inactive windows using 'colorcolumn' setting.
" This tends to slow down redrawing, but is very useful.
" NOTE: this will only work with lines containing text (i.e. not '~')
" Based on https://groups.google.com/d/msg/vim_use/IJU-Vk-QLJE/xz4hjPjCRBUJ
if exists('+colorcolumn')
  " function! s:DimInactiveWindows()
  "   for i in range(1, tabpagewinnr(tabpagenr(), '$'))
  "     let l:range = ""
  "     if i != winnr()
  "       if &wrap
  "         " HACK: when wrapping lines is enabled, we use the maximum number
  "         " of columns getting highlighted. This might get calculated by
  "         " looking for the longest visible line and using a multiple of
  "         " winwidth().
  "         let l:width=256 " max
  "       else
  "         let l:width=winwidth(i)
  "       endif
  "       let l:range = join(range(1, l:width), ',')
  "     endif
  "     call setwinvar(i, '&colorcolumn', l:range)
  "   endfor
  " endfunction

  augroup DimInactiveWindows
    au!
    " au WinEnter * call s:DimInactiveWindows()
    au WinEnter * set cursorline
    au WinEnter * set number
    au BufEnter * set cursorline
    au InsertEnter * set nocursorline

    au BufLeave * set nocursorline
    au InsertLeave * set cursorline
    au WinLeave * set nocursorline
    au WinLeave * set nonumber
  augroup END
endif

" mapping to generate tags file
function! FlushEnvironment()
  silent! exe ":!ctags -R"
endfunction

" Delete trailing white space on save, useful for Python and CoffeeScript ;)
func! DeleteTrailingWS()
  exe "normal mz"
  %s/\s\+$//ge
  exe "normal `z"
endfunc

" Diff current buffer with last GIT version
function! s:DiffWithGITCheckedOut()
  let filetype=&ft
  diffthis
  vnew | exe "%!git diff " . expand("#:p:h") . "| patch -p 1 -Rs -o /dev/stdout"
  exe "setlocal bt=nofile bh=wipe nobl noswf ro ft=" . filetype
  diffthis
endfunction
com! DiffGIT call s:DiffWithGITCheckedOut()

" Cosco
autocmd FileType javascript,css nmap <silent> ,; :call cosco#commaOrSemiColon()<CR>
autocmd FileType javascript,css inoremap <silent> ,; <ESC>:call cosco#commaOrSemiColon()"<CR>a

" If there isn't one, append a semi colon to the end of the current line.
function! s:appendSemiColon()
  if getline('.') !~ ';$'
    let original_cursor_position = getpos('.')
    exec("s/$/;/")
    call setpos('.', original_cursor_position)
  endif
endfunction

" For programming languages using a semi colon at the end of statement.
autocmd FileType c,cpp,css,java,javascript,perl,php,jade nmap <silent> ;; :call <SID>appendSemiColon()<CR>
autocmd FileType c,cpp,css,java,javascript,perl,php,jade inoremap <silent> ;; <ESC>:call <SID>appendSemiColon()<CR>a

"------------------------------------------------------------------------------
" Filetypes #ftypes
" -----------------------------------------------------------------------------
" filetypes borrowed from @bit-theory vimfiles and edited
augroup buffer_cmds
  " clear commands before resetting
  autocmd!

  " when vimrc is edited, reload it
  " autocmd bufwritepost .gvimrc source %
  " autocmd bufwritepost .vimrc source %
  " autocmd bufwritepost .vim source %

  " Only show cursorline in the current window and in normal mode
  au WinLeave,InsertEnter * set nocul
  au WinEnter,InsertLeave * set cul
  " au VimLeave * :!clear

  " Markdown turn off lazyredraw
  autocmd BufNewFile,BufRead *.md,*.mdown,*.markdown set nolazyredraw

  " arduino
  au BufNewFile,BufReadPost *.ino,*.pde set filetype=arduino

  " filetype
  autocmd BufNewFile,BufRead *.json setf json
  autocmd BufNewFile,BufRead *.slim set filetype=slim
  autocmd BufNewFile,BufRead *.less setf less

  " Enable omnicomplete for supported filetypes
  autocmd FileType css,scss,sass,less setlocal omnifunc=csscomplete#CompleteCSS
  autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
  autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
  " jscomplete is a separate plugin
  autocmd FileType javascript setlocal omnifunc=jscomplete#CompleteJS
  autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
  autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

  " make `gf` search for .js files
  autocmd FileType javascript setlocal suffixesadd=.js
  autocmd FileType javascript setlocal path+=js,scripts

  " make sure `complete` works as expected for CSS class names whithout
  " messing with motions (eg. '.foo-bar__baz') and we make sure all
  " delimiters (_,-,$,%,.) are treated as word separators outside insert mode
  autocmd InsertEnter,BufLeave * setl iskeyword=@,48-57,192-255,\@,\$,%,-,_
  autocmd InsertLeave,BufEnter * setl iskeyword=@,48-57,192-255

  " Color Column (only on insert)
  if exists("&colorcolumn")
    autocmd InsertEnter * set colorcolumn=80
    autocmd InsertLeave * set colorcolumn=""
  endif
augroup END

" Highlight cursor line.
" augroup CursorLine
"   au!
"   au VimEnter,WinEnter,BufWinEnter * setlocal cursorline
"   au VimEnter,WinEnter,BufWinEnter * setlocal cursorcolumn
"   au WinLeave * setlocal nocursorline
"   au WinLeave * setlocal nocursorcolumn
" augroup END


" -----------------------------------------------------------------------------
" Keybindings
" -----------------------------------------------------------------------------

" error and quickfix window toggles
nmap <silent> <f3> :Errors<CR>
nmap <silent> <f4> :QFixToggle<cr>

" rebuild ctags
silent! nnoremap <silent> <S-F5> :call FlushEnvironment()<CR>

" give us BundleInstall!
noremap <F5> :BundleInstall!<cr>
map <F5> :BundleInstall!<cr>

" navigation a lil better
noremap j gj
noremap k gk
noremap gj j
noremap gk k

" remap q for recording to Q
nnoremap Q q
nnoremap q <Nop>

" saving and quiting more easily
nmap <leader>w :w<cr>
nmap <leader>q :q<cr>

" Make opening files in a new tab easier
nmap <C-t> :tabnew<space>
nmap <C-e> :edit<space> <C-d>

" Window and tab movement
map <C-j> <Nop>
map <C-k> <Nop>
unmap <C-j>
unmap <C-k>
map <C-h> <Nop>
map <C-l> <Nop>
unmap <C-h>
unmap <C-l>
"reassign them
nnoremap <C-l> <C-W>w
nnoremap <C-h> <C-W>W

" this always does annoying things for some reason, so stop it
noremap K <nop>

" stop changing casing when in visual mode
vnoremap u <nop>

nmap <Up> <Nop>
nmap <Down> <Nop>
vmap <Up> <Nop>
vmap <Down> <Nop>
nmap <Left> <Nop>
nmap <Right> <Nop>
vmap <Left> <Nop>
vmap <Right> <Nop>
inoremap <F1> <ESC>
nnoremap <F1> <ESC>
vnoremap <F1> <ESC>

" -----------------------------------------------------------------------------
" CtrlP ------
let g:ctrlp_map = '<leader>m'
" let g:ctrlp_map = '<leader>,'
" nnoremap <leader>m :CtrlPMRU<cr>

" -----------------------------------------------------------------------------
" Switch ------
nnoremap <leader>s :Switch<CR>

" -----------------------------------------------------------------------------
" Unite ------
" NOTE: unite keybindings are in .vimrc under 'Plugin Settings'

" -----------------------------------------------------------------------------
" Golden Ratio ------
"create new vertical window split and focus it
" nnoremap <c-n> :vnew<cr>
nnoremap <c-o> :vnew<cr>:e<space><c-d>
nnoremap <c-n> :vsp .<cr>

"allow deleting selection without updating the clipboard (yank buffer)
vnoremap x "_x
vnoremap X "_X

"copy/paste mappings
noremap <leader>y "*y
noremap <leader>yy "*Y

nnoremap Y y$
vmap <silent><leader>y "xy
map <silent><leader>p "xp

"don't move the cursor after pasting
"(by jumping to back start of previously changed text)
noremap p p`[
noremap P P`[

" -----------------------------------------------------------------------------
" TComment ------
nmap <leader>c :TComment<cr>
vmap <leader>c :TComment<cr>

" -----------------------------------------------------------------------------
" Fugitive ------
nnoremap <leader>gd :Gdiff<cr>
nnoremap <leader>gs :Gstatus<cr>
nnoremap <leader>gw :Gwrite<cr>
nnoremap <leader>ga :Gadd<cr>
nnoremap <leader>gb :Gblame w<cr>
nnoremap <leader>gco :Gcheckout<cr>
nnoremap <leader>gci :Gcommit<cr>
nnoremap <leader>gm :Gmove<cr>
nnoremap <leader>gr :Gremove<cr>
nnoremap <leader>gl :Shell git gl -18<cr>:wincmd \|<cr>
nnoremap <leader>H :Gbrowse<cr>
vnoremap <leader>H :Gbrowse<cr>

" select all text on the page
noremap <leader>v ggVG

" Easier linewise reselection of what you just pasted.
nnoremap <leader>V V`]

" Indent/dedent/autoindent what you just pasted.
nnoremap <lt>> V`]<
nnoremap ><lt> V`]>
nnoremap =- V`]=

" Front and center
" Use :sus for the rare times I want to actually background Vim.
" vnoremap <c-z> <esc>zv`<ztgv

"make the tab key match bracket pairs
map <tab> %
noremap <tab> %
vnoremap <tab> %

" Sudo write (,W)
noremap <silent><leader>W :w !sudo tee %<CR>

" Better mark jumping (line + col)
" nnoremap ' `

" Toggle show tabs and trailing spaces (,c)
nnoremap <silent> <leader>i :set nolist!<CR>

" duplicate whatever’s selected directly below
vmap D y'>p

" Reindent the whole document and keep the cursor in the same location
nnoremap <C-=> mqHmwgg=G`wzt`q

" Insert newline below
nnoremap <cr><cr> o<ESC>

" Search and replace word under cursor (,*)
" nnoremap <leader>fr :%s/\<<C-r><C-w>\>//<Left>
nnoremap <leader>fr :%s#\<<C-r>=expand("<cword>")<CR>\>#

" -----------------------------------------------------------------------------
" Tern ------
" Rename a JavaScript variable with Tern. (r)
" nmap <leader>r :TernRename<CR>
" Jump to JavaScript definition with tern. (j)
" nmap <leader>j :TernDef<CR>

" -----------------------------------------------------------------------------
" Ag/Ack ------
nnoremap <leader>a :Ag!<space>
" immediately grep for word under cursor
map <leader>/ :execute "Ag! " . expand("<cword>") <CR>
vmap <leader>/ :execute "Ag! " . S <CR>

" Toggle 'keep current line in the center of the screen' mode
nnoremap <leader>C :let &scrolloff=999-&scrolloff<cr>
"
" gi already moves to 'last place you exited insert mode', so we'll map gI to
" something similar: move to last change
nnoremap gI `.

" Make D behave
nnoremap D d$

" Delete a line and not keep it in a register
nnoremap X Vx

" Keep search matches in the middle of the window.
nnoremap <silent> n nzzzv
nnoremap <silent> N Nzzzv

" Keep search matches jumping around
nnoremap g; g;zz
nnoremap g, g,zz

" Easier to type, and I never use the default behavior.
noremap H ^
noremap L $
vnoremap L g_

" clear highlights with ESC and <leader><space>
nnoremap <silent><Leader><space> :nohls<CR>

"Quick edit of certain files and such
nnoremap <leader>ev :vsplit $MYVIMRC<cr>
nnoremap <leader>ez :vsplit ~/.zshrc<cr>

" Insert Mode Completion
inoremap <c-f> <c-x><c-f>
inoremap <c-]> <c-x><c-]>

" Redraw my screen
nnoremap U :syntax sync fromstart<cr>:redraw!<cr>

" Select (charwise) the contents of the current line, excluding indentation.
" Great for pasting Python lines into REPLs.
nnoremap vv ^vg_

" Keep the cursor in place while joining lines
nnoremap J mzJ`z

" Split line (sister to [J]oin lines above)
" The normal use of S is covered by cc, so don't worry about shadowing it.
nnoremap S i<cr><esc>^mwgk:silent! s/\v +$//<cr>:noh<cr>`w

" Send visual selection to gist.github.com as a private, filetyped Gist
" Requires the gist command line too (brew install gist)
vnoremap <leader>G :w !gist -p -t %:e \\| pbcopy<cr>

" Insert the directory of the current buffer in command line mode
cnoremap <expr> %% getcmdtype() == ':' ? expand('%:h').'/' : '%%'

" -----------------------------------------------------------------------------
" vimgrep searching and cope displaying
" -----------------------------------------------------------------------------
" Smart Tab Completion
inoremap <tab> <c-r>=Smart_TabComplete()<CR>
inoremap <s-tab> <c-n>

" Remap VIM 0 to first non-blank character
map 0 ^

" pull word under cursor into lhs of a substitute (for quick search and replace)
nmap <leader>r :%s/\<<C-r>=expand("<cword>")<CR>\>/

" -----------------------------------------------------------------------------
" Vroom ------
map <leader>t :VroomRunTestFile<cr>
map <leader>T :VroomRunNearestTest<cr>

" -----------------------------------------------------------------------------
" Gitv ------
nnoremap <Leader>gv :Gitv --all<CR>
nnoremap <Leader>gV :Gitv! --all<CR>

" -----------------------------------------------------------------------------
" Surround ------
" Autoclose in visual mode
vmap [ S[
vmap ( S(
vmap { S{
vmap ] S]
vmap ) S)
vmap } S}
vmap ' S'
vmap " S"

" vmap <leader>" S"lvi"
" vmap <leader>' S'lvi'
" vmap <leader>` S`lvi`
" vmap <leader>( S)lvi(
" vmap <leader>{ S}lvi{
" vmap <leader>[ S]lvi[
" vmap <leader>< S>lvi<

" Insert mode movements
" Ctrl-e: Go to end of line
inoremap <c-e> <esc>A
" Ctrl-a: Go to begin of line
inoremap <c-a> <esc>I

" -----------------------------------------------------------------------------
" Prettify XML/JSON ------
map <leader>pj :%!python -m json.tool<CR>
map <leader>px :%!xmllint % --format<CR>

" -----------------------------------------------------------------------------
" Yankstack ------
nmap <leader>p <Plug>yankstack_substitute_older_paste
nmap <leader>P <Plug>yankstack_substitute_newer_paste
