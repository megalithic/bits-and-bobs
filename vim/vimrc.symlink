" =============================================================================
" A megalithic .vimrc
" Author: Seth Messer <seth.messer@gmail.com>
" -----------------------------------------------------------------------------
" Table of Contents
" 1) Vundle
"   1.1) UI
"   1.2) Utilities
"   1.3) Filetypes
"   1.4) Code Navigation
" 2) UI Tweaks
" 3) Keyboard shortcut Setup
" 4) vim environment handling tweaks (needs work / renaming)
" 5) File navigation
" 6) Auto Commands
"   6.1) Filetypes
"   6.1) Normalization
" =============================================================================

filetype off
filetype plugin indent on
set nocompatible

" =============================================================================
" Plugins / Config
" -----------------------------------------------------------------------------
function! LoadPlugins()
  Plugin 'gmarik/vundle'

  """"" UI ==================================================================
  Plugin 'chriskempson/base16-vim'
  Plugin 'roman/golden-ratio'
  Plugin 'bling/vim-airline'
    set laststatus=2 " so we always get airline displaying
    let g:airline_enable_branch=1
    let g:airline_enable_syntastic=1
    let g:airline_theme='wombat'
    let g:airline_powerline_fonts = 1
    let g:airline_left_sep = ''
    let g:airline_right_sep = ''
    let g:airline_linecolumn_prefix = '␊ '
    let g:airline_linecolumn_prefix = '␤ '
    let g:airline_linecolumn_prefix = '¶ '
    let g:airline_branch_prefix = '⎇ '
    let g:airline_paste_symbol = 'ρ'
    let g:airline_paste_symbol = 'Þ'
    let g:airline_paste_symbol = '∥'
    let g:airline#extensions#tabline#enabled = 0
    let g:airline_mode_map = {
          \ 'n' : 'N',
          \ 'i' : 'I',
          \ 'R' : 'REPLACE',
          \ 'v' : 'VISUAL',
          \ 'V' : 'V-LINE',
          \ 'c' : 'CMD   ',
          \ '': 'V-BLCK',
          \ }
  Plugin 'scrooloose/syntastic'
    let g:syntastic_javascript_jshint_args = '--config ' . $HOME . '/.jshintrc'
    let g:syntastic_enable_signs = 1
    let g:syntastic_check_on_open = 1
    let g:syntastic_disabled_filetypes = ['html', 'rst']
    let g:syntastic_stl_format = '[%E{%e Errors}%B{, }%W{%w Warnings}]'
    let g:syntastic_jsl_conf = '$HOME/.vim/jsl.conf'
    let g:syntastic_javascript_checkers=["jshint", "jsxhint"]
    let g:syntastic_error_symbol='✖' "
    let g:syntastic_warning_symbol='⚑'
    let g:syntastic_html_tidy_ignore_errors=[" proprietary attribute \"ng-"]
    let g:syntastic_always_populate_loc_list=1
    let g:syntastic_javascript_jshint_exec = '/usr/local/bin/jshint'
    let g:syntastic_always_populate_loc_list = 1
    let g:syntastic_quiet_messages = { "type": "style" }
  Plugin 'farseer90718/Rainbow-Parentheses-Improved-and2'
    let g:rainbow_active = 1
  """"" /UI =================================================================

  """"" Utilities ===========================================================
  Plugin 'tomtom/tcomment_vim'
  Plugin 'sickill/vim-pasta'
  Plugin 'zaiste/tmux.vim'
  Plugin 'haya14busa/incsearch.vim'
  Plugin 'jordwalke/VimAutoMakeDirectory'
  Plugin 'Raimondi/delimitMate'
  Plugin 'tpope/vim-endwise'
  Plugin 'tpope/vim-unimpaired'
  Plugin 'tpope/vim-eunuch'
  Plugin 'tpope/vim-surround'
  Plugin 'tpope/vim-repeat'

  Plugin 'skalnik/vim-vroom'
    let g:vroom_use_colors=1
    let g:vroom_map_keys = 0
  Plugin 'tpope/vim-fugitive'
    augroup ft_fugitive
      au!
      au BufNewFile,BufRead .git/index setlocal nolist
      " Automatically remove fugitive buffers
      autocmd BufReadPost fugitive://* set bufhidden=delete
    augroup END

    autocmd BufReadCmd *.git/index exe BufReadIndex()
    autocmd BufEnter *.git/index silent normal gg0j

    function! BufEnterCommit()
      " Start in insert mode for commit
      normal gg0
      if getline('.') == ''
        start
      end
      " force spell when doing a git commit
      if  bufname("%")=="COMMIT_EDITMSG"
          set spell
          set spelllang=en
      endif
    endfunction
    autocmd BufEnter *.git/COMMIT_EDITMSG exe BufEnterCommit()
  Plugin 'mattn/webapi-vim'
  Plugin 'mattn/gist-vim'
    let g:gist_open_browser_after_post = 1
    let g:gist_detect_filetype = 2
    let g:gist_post_private = 1
    if has('macunix')
      let g:gist_clip_command = 'pbcopy'
    endif
  Plugin 'Valloric/ListToggle'
    let g:lt_location_list_toggle_map = '<F3>'
    let g:lt_quickfix_list_toggle_map = '<F4>'
  """"" /Utilities ==========================================================

  """"" Filetypes ===========================================================
  """"""" Ruby
  Plugin 'vim-ruby/vim-ruby'
  Plugin 'tpope/vim-rails'
  Plugin 'tpope/vim-rake'

  """"""" Misc
  Plugin 'tpope/vim-git'
  Plugin 'tpope/vim-markdown'
    let g:markdown_fenced_languages = ['ruby', 'html', 'javascript', 'css', 'erb=eruby.html', 'bash=sh', 'sh']
    autocmd BufNewFile,BufReadPost *.md,*.markdown set filetype=markdown
    autocmd FileType markdown set tw=80

  """"""" JavaScript
  Plugin 'mxw/vim-jsx'
  Plugin 'pangloss/vim-javascript'
  Plugin 'jelera/vim-javascript-syntax'
  Plugin 'othree/javascript-libraries-syntax.vim'
  Plugin 'elzr/vim-json'
  Plugin 'claco/jasmine.vim'
  Plugin 'lukaszb/vim-web-indent'
  Plugin 'Shutnik/jshint2.vim'
  Plugin 'burnettk/vim-angular'
    " src / test directions should be set in project .vimrc

  """"""" CSS/Preprocessors
  Plugin 'othree/html5.vim'
  Plugin 'aaronjensen/vim-sass-status'
  Plugin 'cakebaker/scss-syntax.vim'
  Plugin 'hail2u/vim-css3-syntax'
  Plugin 'groenewege/vim-less'
  Plugin 'tpope/vim-haml'
  """"" /Filetypes ==========================================================

  """"" Code Navigation======================================================
  Plugin 'tpope/vim-vinegar' " navigate up a directory with '-' in netrw, among other things

  """"""" Text objects
  Plugin 'wellle/targets.vim'
  Plugin 'kana/vim-textobj-function'
  Plugin 'kana/vim-textobj-user'
  Plugin 'mattn/vim-textobj-url'
  Plugin 'nelstrom/vim-textobj-rubyblock'
  Plugin 'whatyouhide/vim-textobj-xmlattr'

  Plugin 'ervandew/supertab'
    let g:SuperTabLongestHighlight = 1
    let g:SuperTabCrMapping = 0
  Plugin 'FelikZ/ctrlp-py-matcher'
  Plugin 'kien/ctrlp.vim.git'
    let g:ctrlp_match_window_bottom = 1    " Show at bottom of window
    let g:ctrlp_working_path_mode = 'ra'   " Our working path is our VCS project or the current directory
    let g:ctrlp_mru_files = 1              " Enable Most Recently Used files feature
    let g:ctrlp_jump_to_buffer = 2         " Jump to tab AND buffer if already open
    let g:ctrlp_open_new_file = 'v'        " open selections in a vertical split
    let g:ctrlp_open_multiple_files = 'vr' " opens multiple selections in vertical splits to the right
    let g:ctrlp_arg_map = 0
    let g:ctrlp_dotfiles = 0               " do not show (.) dotfiles in match list
    let g:ctrlp_showhidden = 0             " do not show hidden files in match list
    let g:ctrlp_split_window = 0
    let g:ctrlp_max_height = 40            " restrict match list to a maxheight of 40
    let g:ctrlp_use_caching = 0            " don't cache, we want new list immediately each time
    let g:ctrlp_max_files = 0              " no restriction on results/file list
    let g:ctrlp_working_path_mode = ''
    let g:ctrlp_dont_split = 'NERD_tree_2' " don't split these buffers
    let g:ctrlp_custom_ignore = {
          \ 'dir':  '\v[\/]\.(git|hg|svn|gitkeep)$',
          \ 'file': '\v\.(exe|so|dll|log|gif|jpg|jpeg|png|psd|DS_Store|ctags|gitattributes)$'
          \ }
    " let g:ctrlp_match_func = { 'match': 'pymatcher#PyMatch' }
    let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
    " let g:ctrlp_user_command = ['.git/', 'cd %s && git ls-files --exclude-standard -co']
    let g:ctrlp_prompt_mappings = {
          \ 'AcceptSelection("e")': ['<c-e>', '<c-space>', '<2-LeftMouse>'],
          \ 'AcceptSelection("h")': ['<c-x>', '<c-cr>', '<c-s>'],
          \ 'AcceptSelection("t")': ['<c-t>'],
          \ 'AcceptSelection("v")': ['<cr>', '<RightMouse>'],
          \ 'PrtSelectMove("j")':   ['<c-j>', '<down>', '<s-tab>'],
          \ 'PrtSelectMove("k")':   ['<c-k>', '<up>', '<tab>'],
          \ 'PrtHistory(-1)':       ['<c-n>'],
          \ 'PrtHistory(1)':        ['<c-p>'],
          \ 'ToggleFocus()':        ['<c-tab>'],
          \}
  Plugin 'rking/ag.vim'
    let g:ackprg="ag --column --nogroup"
    set grepprg=ag\ --nogroup\ --line-numbers\ --column\ --noheading
    let g:agprg="ag --column --nogroup --line-numbers"
  Plugin 'inside/vim-search-pulse'
    let g:vim_search_pulse_mode = 'cursor_line'
  """"" /Code Navigation ====================================================

  """"" Snippets ============================================================
  Plugin 'matthewsimo/angular-vim-snippets'
  " Plugin 'honza/vim-snippets'
  " Plugin 'SirVer/ultisnips'
  "   let g:UltiSnipsExpandTrigger="<tab>"
  "   let g:UltiSnipsJumpForwardTrigger="<tab>"
  "   let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
  "   let g:UltiSnipsSnippetsDir="~/.vim/snippets"
  """"" /Snippets ===========================================================

  Plugin 'vim-scripts/matchit.zip'
endfunction

" Execute our Plugins, if it doesn't work, tell them how to install Vundle
try
  set rtp+=~/.vim/bundle/vundle/
  call vundle#begin()
  call LoadPlugins()
  call vundle#end()
  :catch /^Vim\%((\a\+)\)\=:E117/
  echomsg "Failed to load vundle and/or bundles. Perhaps vundle isn't installed."
  echomsg "You need to install vundle into ~/.vim/bundle/vundle: "
  echomsg "   git clone http://github.com/gmarik/vundle.git ~/.vim/bundle/vundle"
  echomsg "   vim -c ':PluginInstall' -c ':qa!'"
endtry

runtime macros/matchit.vim
filetype plugin indent on
" End Plugins / Config ========================================================


let g:JSHintHighlightErrorLine = 1
let javascript_fold = 1
let loaded_matchit = 1
let ruby_fold = 1
let g:js_indent_log = 1
let javascript_enable_domhtmlcss=1


" =============================================================================
" Main Settings #msettings
" -----------------------------------------------------------------------------

""""" UI ====================================================================
set t_Co=256
" in case t_Co alone doesn't work, add this as well:
let &t_AB="\e[48;5;%dm"
let &t_AF="\e[38;5;%dm"
set t_ut= " improve screen clearing by using the background color
set background=dark
syntax enable
colorscheme base16-ocean

syntax on
set enc=utf-8
set term=screen-256color
let $TERM='screen-256color'
""""" /UI ===================================================================

""""" Behavior =============================================================
set ttyfast
set showcmd
set fileformats=unix,mac,dos

set undodir=/tmp
set undofile
set undoreload=500
set undolevels=500

"" Swaps, backups, and sessions
if !strlen($SUDO_USER) && has("unix")
  " Don't store swaps in . -- store in ~/.vim/tmp/swap/%path%to%orig.swp
  set directory=~/.vim/tmp/swap//,.,/var/tmp
  " Don't store backups in . -- store in ~/.vim/tmp/backup/%path%to%orig~
  set backupdir=~/.vim/tmp/backup//,.,/var/tmp
  " Create tmp/ dir if it doesn't exist
  if !isdirectory($HOME."/.vim/tmp") && exists("*mkdir")
    call mkdir($HOME."/.vim/tmp/swap", "p", 0700)
    call mkdir($HOME."/.vim/tmp/backup", "p", 0700)
  endif
else
  set nobackup
  set nowritebackup
  set noswapfile
endif
set sessionoptions-=options     " Do not save settings and mappings to sessions

set autoindent
set smartindent
set cindent

set number
set ofu=syntaxcomplete#Complete " Set omni-completion method.
set completeopt=longest,menuone,preview
set omnifunc=syntaxcomplete#Complete
set completefunc=syntaxcomplete#Complete
set complete=.,w,b,u,U,t,i,d

set wildmenu
set wildmode=list:longest
set wildignore+=*.jpg,*.jpeg,*.gif,*.png,*.gif,*.psd,*.o,*.obj,*.min.js
set wildignore+=*/smarty/*,*/vendor/*,*/node_modules/*,*/.git/*,*/.hg/*,*/.svn/*,*/.sass-cache/*,*/log/*,*/tmp/*,*/build/*,*/ckeditor/*,*/expert/*,*/solr/*,*/dist/*,*/bower_components/*,*/cf/*
set wildignore+=log/**,node_modules/**,target/**,tmp/**,*.rbc
set wildignore+=*.aux,*.out,*.toc                " latex intermediate files
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg   " binary images
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest " compiled object files
set wildignore+=*.spl                            " compiled spelling word lists
set wildignore+=*.sw?                            " vim swap files
set wildignore+=*.ds_store                       " osx
set wildignore+=*.luac                           " lua byte code
set wildignore+=migrations                       " django migrations
set wildignore+=*.pyc                            " python byte code
set wildignore+=*.orig                           " merge resolution files
set wildignore+=classes
set wildignore+=lib

set report=0 " Show all changes.
set hidden
set backspace=indent,eol,start
set history=100

set listchars=tab:▸\ ,eol:¬,extends:❯,precedes:❮,trail:·,nbsp:⚋

set fcs=fold:-
set shell=/usr/local/bin/zsh\ --login
set lazyredraw "may be the cause of lots of issues
set matchtime=3
set showbreak=↪
set splitbelow

set diffopt=filler          " Add vertical spaces to keep right and left aligned.
set diffopt+=iwhite         " Ignore whitespace changes.

set timeout
set ttimeoutlen=10
set timeoutlen=100

set autowrite
set autoread
set shiftround
set linebreak
set synmaxcol=800 " turn off syntax highlight beyond 800 chars

set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab

set ruler
set nowrap
set wrap
set wrapscan
set textwidth=79
set formatoptions=qrn1 " automatic formating.
set formatoptions-=or  " don't start new lines w/ comment leader on pressing 'o'
set shortmess=atI      " don't show the intro message when starting vim.
" set colorcolumn=+1

set ignorecase
set smartcase
set incsearch
set showmatch
set hlsearch

set matchpairs+=<:>
set gdefault

set scrolloff=5
set sidescroll=1
set sidescrolloff=10
" set cul "toggle cursorline
" set cuc "toggle cursorcolumn
set virtualedit+=block

set nofoldenable        "dont fold by default

set magic
set mat=2

set re=1

set noerrorbells
set novisualbell
set t_vb=
set tm=500

" DON'T BE SILLY! NO MEESES HERE!
" if has('mouse')
"   set mouse-=a                   " Enable mouse everywhere.
"   set mousemodel=popup_setpos   " Show a pop-up for right-click.
"   set mousehide                 " Hide mouse while typing.
" endif

" add system clipboard support
set clipboard+=unnamed

" treat certain characters as full keyword boundaries, e.g. `-`
set iskeyword+=-

set exrc   " enable per-directory .vimrc files
set secure " disable unsafe commands in local .vimrc files
""""" /Behavior =============================================================


" =============================================================================
" Highlighting
" -----------------------------------------------------------------------------
au BufEnter *.rb syn match ExtraWhitespace contained "\<binding.pry\>"
au BufEnter *.js syn match ExtraWhitespace contained "\<debugger\>"
au ColorScheme * hi ExtraWhitespace ctermbg=red guibg=red
au Syntax * syn match ExtraWhitespace /\s\+$\| \+\ze\\t/

hi ColorColumn ctermfg=232 ctermbg=238 guibg=#262626
hi ExtraWhitespace ctermbg=red guibg=red
hi SyntasticError ctermbg=red term=bold
hi CursorLineNr term=bold ctermbg=144
" you're welcome @knewter vv
hi CursorLine ctermbg=none
hi NonText ctermfg=24
hi SpecialKey ctermfg=24 guibg=NONE
hi Search term=underline ctermbg=144

match ErrorMsg '^\(<\|=\|>\)\{7\}\([^=].\+\)\?$'
" match ExtraWhitespace /\s\+$/
match ExtraWhitespace /\s\+\%#\@<!$/
" match OverLength /\%80v.\+/


" =============================================================================
" Autocommands
" -----------------------------------------------------------------------------

function! BufReadIndex()
  " Use j/k in status
  " setlocal cursorline
  setlocal nohlsearch
  nnoremap <buffer> <silent> j :call search('^#\t.*','W')<Bar>.<CR>
  nnoremap <buffer> <silent> k :call search('^#\t.*','Wbe')<Bar>.<CR>
endfunction

augroup Tmux
  au!
  au VimEnter,BufNewFile,BufReadPost * call system('tmux rename-window "vim - ' . split(substitute(getcwd(), $HOME, '~', ''), '/')[-1] . '"')
  au VimLeave * call system('tmux rename-window ' . split(substitute(getcwd(), $HOME, '~', ''), '/')[-1])
augroup END

augroup trailing
  au!
  au InsertEnter * :set listchars-=trail:⌴
augroup END

augroup line_return
  au!
  au BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \     execute 'normal! g`"zvzz' |
    \ endif
augroup END

" Resize splits when the window is resized
au VimResized * :wincmd =

" change vim cursor depending on the mode
if exists('$TMUX')
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
  let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif

" if more than 1 files are passed to vim as arg, open them in vertical splits
if argc() > 1
  silent vertical all
endif

if has("autocmd")
  augroup vimrc
    autocmd!

    set cursorline

    " Only highlight cursor line in active buffer window
    autocmd WinLeave * set nocursorline
    autocmd WinEnter * if &filetype != 'qf' | set cursorline | endif

    autocmd QuickFixCmdPost *grep* cwindow

    highlight! link TrailingWhitespace Error
    highlight! link MixedWhitespace TrailingWhitespace

    autocmd BufWinEnter * if &modifiable | match MixedWhitespace / \+\t\+/ | endif
    autocmd BufWinEnter * if &modifiable | match TrailingWhitespace /\s\+$/ | endif
    autocmd InsertEnter * if &modifiable | match TrailingWhitespace /\s\+\%#\@<!$/ | endif
    autocmd InsertLeave * if &modifiable | match TrailingWhitespace /\s\+$/ | endif
    autocmd BufWinLeave * if &modifiable | call clearmatches() | endif

    " Never show line numbers in command-line window as they are not useful
    " and take up space (normally it inherits this setting like any other
    " window)
    autocmd CmdwinEnter * set nonumber
  augroup END
endif


" =============================================================================
" Custom Functions #cfunctions
" -----------------------------------------------------------------------------

" Scratch
command! ScratchToggle call ScratchToggle()
function! ScratchToggle()
    if exists("w:is_scratch_window")
        unlet w:is_scratch_window
        exec "q"
    else
        exec "normal! :Sscratch\<cr>\<C-W>L"
        let w:is_scratch_window = 1
    endif
endfunction

" Smart TabComplete
function! Smart_TabComplete()
  let line = getline('.')                         " current line

  let substr = strpart(line, -1, col('.')+1)      " from the start of the current
  " line to one character right
  " of the cursor
  let substr = matchstr(substr, "[^ \t]*$")       " word till cursor
  if (strlen(substr)==0)                          " nothing to match on empty string
    return "\<tab>"
  endif
  let has_period = match(substr, '\.') != -1      " position of period, if any
  let has_slash = match(substr, '\/') != -1       " position of slash, if any
  if (!has_period && !has_slash)
    return "\<C-X>\<C-P>"                         " existing text matching
  elseif ( has_slash )
    return "\<C-X>\<C-F>"                         " file matching
  else
    return "\<C-X>\<C-O>"                         " plugin matching
  endif
endfunction

augroup FastEscape
  autocmd!
  au InsertEnter * set timeoutlen=0
  au InsertLeave * set timeoutlen=1000
augroup END

" Dim inactive windows using 'colorcolumn' setting.
" This tends to slow down redrawing, but is very useful.
" NOTE: this will only work with lines containing text (i.e. not '~')
" Based on https://groups.google.com/d/msg/vim_use/IJU-Vk-QLJE/xz4hjPjCRBUJ
if exists('+colorcolumn')
  function! s:DimInactiveWindows()
    for i in range(1, tabpagewinnr(tabpagenr(), '$'))
      let l:range = ""
      if i != winnr()
        if &wrap
          " HACK: when wrapping lines is enabled, we use the maximum number
          " of columns getting highlighted. This might get calculated by
          " looking for the longest visible line and using a multiple of
          " winwidth().
          let l:width=400 " max
        else
          let l:width=winwidth(i)
        endif
        let l:range = join(range(1, l:width), ',')
      endif
      call setwinvar(i, '&colorcolumn', l:range)
    endfor
  endfunction

  augroup DimInactiveWindows
    au!
    " au WinEnter * call s:DimInactiveWindows()
    au WinEnter * set cursorline
    au WinEnter * set number
    au WinEnter * set syntax=ON
    au BufEnter * set syntax=ON
    " au BufEnter * set cursorline
    " au InsertEnter * set nocursorline

    " au BufLeave * set nocursorline
    au BufLeave * set syntax=OFF
    " au InsertLeave * set cursorline
    " au WinLeave * set nocursorline
    au WinLeave * set nonumber
    au WinLeave * set syntax=OFF
  augroup END
endif

" mapping to generate tags file
function! FlushEnvironment()
  silent! exe ":!ctags -R"
endfunction

" Delete trailing white space on save, useful for Python and CoffeeScript ;)
func! DeleteTrailingWS()
  exe "normal mz"
  %s/\s\+$//ge
  exe "normal `z"
endfunc
au BufWrite * silent call DeleteTrailingWS()


"------------------------------------------------------------------------------
" Filetypes #ftypes / Syntax
" -----------------------------------------------------------------------------
" filetypes borrowed from @bit-theory vimfiles and edited
"
augroup buffer_cmds
  " clear commands before resetting
  autocmd!

  " Only show cursorline in the current window and in normal mode
  " au WinLeave,InsertEnter * set nocul
  " au WinEnter,InsertLeave * set cul
  " au VimLeave * :!clear

  " Markdown turn off lazyredraw
  autocmd BufNewFile,BufRead *.md,*.mdown,*.markdown set nolazyredraw filetype=markdown
  autocmd BufNewFile,BufRead *.md,*.mdown,*.markdown set filetype=markdown

  " arduino
  au BufNewFile,BufReadPost *.ino,*.pde set filetype=arduino

  " filetype
  autocmd BufNewFile,BufRead *.json set filetype=json
  autocmd BufNewFile,BufRead *.slim set filetype=slim
  autocmd BufNewFile,BufRead *.less set filetype=less
  " autocmd BufNewFile,BufRead *.scss set filetype=sass

  " Enable omnicomplete for supported filetypes
  autocmd FileType css,scss,sass,less setlocal omnifunc=csscomplete#CompleteCSS
  autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
  autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS

  " jscomplete is a separate plugin
  autocmd FileType javascript setlocal omnifunc=jscomplete#CompleteJS
  autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
  autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

  " make `gf` search for .js files
  autocmd FileType javascript setlocal suffixesadd=.js
  autocmd FileType javascript setlocal path+=js,scripts

  " make sure `complete` works as expected for CSS class names whithout
  " messing with motions (eg. '.foo-bar__baz') and we make sure all
  " delimiters (_,-,$,%,.) are treated as word separators outside insert mode
  autocmd InsertEnter,BufLeave * setl iskeyword=@,48-57,192-255,\@,\$,%,-,_
  autocmd InsertLeave,BufEnter * setl iskeyword=@,48-57,192-255

  " Color Column (only on insert)
  if exists("&colorcolumn")
    autocmd InsertEnter * set colorcolumn=80
    autocmd InsertLeave * set colorcolumn=""
  endif
augroup END

" =============================================================================
" Keybindings
" -----------------------------------------------------------------------------
let mapleader=","
let maplocalleader="\\"


""""" Navigation ============================================================
" Make opening files in a new tab easier
nmap <C-t> :tabnew<space>
nmap <C-e> :edit<space> <C-d>

" navigation a lil better
noremap j gj
noremap k gk
noremap gj j
noremap gk k

" Window and tab movement
map <C-j> <Nop>
map <C-k> <Nop>
unmap <C-j>
unmap <C-k>
map <C-h> <Nop>
map <C-l> <Nop>
unmap <C-h>
unmap <C-l>
"now, remap them
nnoremap <C-l> <C-W>w
nnoremap <C-h> <C-W>W

" Disable arrow keys
nmap <Up> <Nop>
nmap <Down> <Nop>
vmap <Up> <Nop>
vmap <Down> <Nop>
nmap <Left> <Nop>
nmap <Right> <Nop>
vmap <Left> <Nop>
vmap <Right> <Nop>

" saving and quiting more easily
nmap <leader>w :w<cr>
nmap <leader>q :q<cr>

nnoremap / /\v
vnoremap / /\v

" why must i press shift to execute commands?
nnoremap ; :

" = START KEYBINDINGS FROM http://sheerun.net/2014/03/21/how-to-boost-your-vim-productivity
" copy and paste from system clipboard with <leader>p and <leader>y:
vmap <Leader>y "+y
vmap <Leader>d "+d
nmap <Leader>p "+p
nmap <Leader>P "+P
vmap <Leader>p "+p
vmap <Leader>P "+P

" easier search and replace:
vnoremap <silent> s //e<C-r>=&selection=='exclusive'?'+1':''<CR><CR>
    \:<C-u>call histdel('search',-1)<Bar>let @/=histget('search',-1)<CR>gv
omap s :normal vs<CR>

" jump to end of pasted content:
vnoremap <silent> y y`]
vnoremap <silent> p p`]
nnoremap <silent> p p`]

" prevent replacing paste buffer on paste:
" vp doesn't replace paste buffer
function! RestoreRegister()
  let @" = s:restore_reg
  return ''
endfunction
function! s:Repl()
  let s:restore_reg = @"
  return "p@=RestoreRegister()\<cr>"
endfunction
vmap <silent> <expr> p <sid>Repl()

" reselect pasted content:
noremap gV `[v`]
" = END KEYBINDINGS FROM http://sheerun.net/2014/03/21/how-to-boost-your-vim-productivity

" give us PluginInstall!
noremap <F5> :PluginInstall!<cr>
map <F5> :PluginInstall!<cr>

" remap q for recording to Q
nnoremap Q q
nnoremap q <Nop>

" this always does annoying things for some reason, so stop it
noremap K <nop>

" stop changing casing when in visual mode
vnoremap u <nop>

inoremap <F1> <ESC>
nnoremap <F1> <ESC>
vnoremap <F1> <ESC>

"allow deleting selection without updating the clipboard (yank buffer)
vnoremap x "_x
vnoremap X "_X

"copy/paste mappings
noremap <leader>y "*y
noremap <leader>yy "*Y

nnoremap Y y$
vmap <silent><leader>y "xy
map <silent><leader>p "xp

"don't move the cursor after pasting
"(by jumping to back start of previously changed text)
noremap p p`[
noremap P P`[


" -----------------------------------------------------------------------------
" CtrlP ------
let g:ctrlp_map = '<leader>m'
" nnoremap <leader>m :CtrlPMRU<cr>

" -----------------------------------------------------------------------------
" Golden Ratio ------
"create new vertical window split and focus it
" nnoremap <c-n> :vnew<cr>
nnoremap <c-o> :vnew<cr>:e<space><c-d>
nnoremap <c-n> :vsp .<cr>

" -----------------------------------------------------------------------------
" TComment ------
nmap <leader>c :TComment<cr>
vmap <leader>c :TComment<cr>

" select all text on the page
noremap <leader>v ggVG

" Easier linewise reselection of what you just pasted.
nnoremap <leader>V V`]

" Indent/dedent/autoindent what you just pasted.
nnoremap <lt>> V`]<
nnoremap ><lt> V`]>
nnoremap =- V`]=

" Front and center
" Use :sus for the rare times I want to actually background Vim.
vnoremap <c-z> <esc>zv`<ztgv

"make the tab key match bracket pairs
map <tab> %
noremap <tab> %
vnoremap <tab> %

" Sudo write (,W)
noremap <silent><leader>W :w !sudo tee %<CR>

" Better mark jumping (line + col)
nnoremap ' <nop>

" duplicate whatever’s selected, to the next line
vmap D y'>p

" Reindent the whole document and keep the cursor in the same location
nnoremap <C-=> mqHmwgg=G`wzt`q

" Insert newline below
nnoremap <cr><cr> o<ESC>

" Search and replace word under cursor (,*)
" nnoremap <leader>fr :%s/\<<C-r><C-w>\>//<Left>
nnoremap <leader>fr :%s#\<<C-r>=expand("<cword>")<CR>\>#

" Use word under cursor into lhs of a substitute (for quick search and replace)
nnoremap <leader>r :%s/\<<C-r>=expand("<cword>")<CR>\>/

" -----------------------------------------------------------------------------
" Tern ------
" Rename a JavaScript variable with Tern. (r)
" nmap <leader>r :TernRename<CR>
" Jump to JavaScript definition with tern. (j)
" nmap <leader>j :TernDef<CR>

" -----------------------------------------------------------------------------
" Fugitive ------
nnoremap <leader>H :Gbrowse<cr>
vnoremap <leader>H :Gbrowse<cr>

" -----------------------------------------------------------------------------
" Ag/Ack ------
nnoremap <leader>a :Ag!<space>
" immediately ag/ack/grep for word under cursor
map <leader>/ :execute "Ag! " . expand("<cword>") <CR>
vmap <leader>/ :execute "Ag! " . S <CR>

" Toggle 'keep current line in the center of the screen' mode
nnoremap <leader>C :let &scrolloff=999-&scrolloff<cr>
"
" gi already moves to 'last place you exited insert mode', so we'll map gI to
" something similar: move to last change
nnoremap gI `.

" Make D behave
nnoremap D d$

" Delete a line and not keep it in a register
nnoremap X Vx

" Keep search matches in the middle of the window.
nnoremap <silent> n nzzzv
nnoremap <silent> N Nzzzv

" Keep search matches jumping around
nnoremap g; g;zz
nnoremap g, g,zz

" Easier to type, and I never use the default behavior.
noremap H ^
noremap L $
vnoremap L g_

" clear highlights with ESC and <leader><space>
nnoremap <silent><Leader><space> :nohls<CR>

"Quick edit of certain files and such
nnoremap <leader>ev :vsplit $MYVIMRC<cr>
nnoremap <leader>ez :vsplit ~/.zshrc<cr>

" Insert Mode Completion
inoremap <c-f> <c-x><c-f>
inoremap <c-]> <c-x><c-]>

" Redraw my screen
nnoremap U :syntax sync fromstart<cr>:redraw!<cr>

" Select (charwise) the contents of the current line, excluding indentation.
" Great for pasting Python lines into REPLs.
nnoremap vv ^vg_

" Keep the cursor in place while joining lines
nnoremap J mzJ`z

" Split line (sister to [J]oin lines above)
" The normal use of S is covered by cc, so don't worry about shadowing it.
nnoremap S i<cr><esc>^mwgk:silent! s/\v +$//<cr>:noh<cr>`w

" Send visual selection to gist.github.com as a private, filetyped Gist
" Requires the gist command line too (brew install gist)
" vnoremap <leader>G :'<,'>Gist -p -t<cr>
vnoremap <leader>G !gist -p -t %:e \\| pbcopy<cr>

" Insert the directory of the current buffer in command line mode
cnoremap <expr> %% getcmdtype() == ':' ? expand('%:h').'/' : '%%'

" Smart Tab Completion
inoremap <tab> <c-r>=Smart_TabComplete()<CR>
inoremap <s-tab> <c-n>

" Remap VIM 0 to first non-blank character
map 0 ^


" -----------------------------------------------------------------------------
" Vroom ------
silent! map <unique> <Leader>t :VroomRunTestFile<CR>
silent! map <unique> <Leader>T :VroomRunNearestTest<CR>
silent! map <unique> <Leader>l :VroomRunLastTest<CR>

" -----------------------------------------------------------------------------
" Dispatch ------
nnoremap <leader>D :Dispatch<space>

" -----------------------------------------------------------------------------
" Surround ------
" Autoclose in visual mode
vmap [ S]
vmap ( S)
vmap { S}
" vmap ] S[
" vmap ) S(
" vmap } S{
vmap ' S'
vmap " S"

" vmap <leader>" S"lvi"
" vmap <leader>' S'lvi'
" vmap <leader>` S`lvi`
" vmap <leader>( S)lvi(
" vmap <leader>{ S}lvi{
" vmap <leader>[ S]lvi[
" vmap <leader>< S>lvi<

" Insert mode movements
" Ctrl-e: Go to end of line
inoremap <c-e> <esc>A
" Ctrl-a: Go to begin of line
inoremap <c-a> <esc>I

" -----------------------------------------------------------------------------
" Prettify XML/JSON ------
map <leader>pj :%!python -m json.tool<CR>
map <leader>px :%!xmllint % --format<CR>
