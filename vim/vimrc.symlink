" =============================================================================
"
"   ┌┬┐┌─┐┌─┐┌─┐┬  ┬┌┬┐┬ ┬┬┌─┐
"   │││├┤ │ ┬├─┤│  │ │ ├─┤││   :: DOTFILES > vimrc
"   ┴ ┴└─┘└─┘┴ ┴┴─┘┴ ┴ ┴ ┴┴└─┘
"   Brought to you by: Seth Messer / @megalithic
"
" -----------------------------------------------------------------------------
" Table of Contents
" -----------------------------------------------------------------------------
" 1) Plugins / Config #plugins
"   1.1) UI
"   1.2) Utilities
"   1.3) Filetypes
"   1.4) Code Navigation
"     1.4.1) Text objects
" 2) Main Settings #msettings
"   2.1) UI
"   2.2) Behavior
"   2.3) *Needs more work and organizing and documentation
" 3) Highlighting #highlights
" 4) Custom functions #cfunctions
" 5) Auto Commands #autocommands
"   5.1) Filetypes
"   5.2) Normalization
" 6) Filetypes #ftypes
" 7) Keybindings #bindings
" 8) Abbreviations #abbrev
" =============================================================================

filetype off
set nocompatible

" =============================================================================
" Plugins / Config #plugins
" -----------------------------------------------------------------------------
function! LoadPlugs()
  """"" UI ==================================================================
  Plug 'chriskempson/base16-vim'
  Plug 'w0ng/vim-hybrid'
  Plug 'morhetz/gruvbox'
  Plug 'junegunn/seoul256.vim'
  Plug 'RobertAudi/golden-ratio'
    let g:golden_ratio_exclude_nonmodifiable = 1
    let g:golden_ratio_wrap_ignored = 0
    let g:golden_ratio_filetypes_blacklist = ["nerdtree", "unite", "ctrlp", "quickfix", "quickfix-list", "quickfix-list-window", "location-list", "location-list-window", "unlisted", "directory", "help", "scratch", "netrw", "NetrwTreeListing 1", "NetrwTreeListing", "NetrwTreeListing1"]
  Plug 'christoomey/vim-tmux-navigator'
  Plug 'christoomey/vim-tmux-runner'
  Plug 'itchyny/lightline.vim'
    let g:lightline = {
          \ 'colorscheme': 'wombat',
          \ 'active': {
          \   'left': [ [ 'mode', 'paste' ], [ 'fugitive', 'filename' ], ['ctrlpmark'] ],
          \   'right': [ [ 'syntastic', 'lineinfo' ], ['percent'], [ 'fileformat', 'fileencoding', 'filetype' ] ]
          \ },
          \ 'component_function': {
          \   'fugitive': 'MyFugitive',
          \   'filename': 'MyFilename',
          \   'fileformat': 'MyFileformat',
          \   'filetype': 'MyFiletype',
          \   'fileencoding': 'MyFileencoding',
          \   'mode': 'MyMode',
          \ },
          \ 'component_expand': {
          \   'syntastic': 'SyntasticStatuslineFlag',
          \ },
          \ 'component_type': {
          \   'syntastic': 'error',
          \ },
          \ 'separator': { 'left': '', 'right': '' },
          \ 'subseparator': { 'left': '', 'right': '' }
          \ }

    function! MyModified()
      return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '✭' : &modifiable ? '' : '-'
    endfunction

    function! MyReadonly()
      return &ft !~? 'help\|vimfiler\|gundo' && &readonly ? '⭤' : ''
    endfunction

    function! MyFilename()
      let fname = expand('%:t')
      return fname == '__Tagbar__' ? g:lightline.fname :
            \ fname =~ '__Gundo\|NERD_tree' ? '' :
            \ ('' != MyReadonly() ? MyReadonly() . ' ' : '') .
            \ ('' != fname ? fname : '[No Name]') .
            \ ('' != MyModified() ? ' ' . MyModified() : '')
    endfunction

    function! MyFugitive()
      try
        if expand('%:t') !~? 'Tagbar\|Gundo\|NERD' && &ft !~? 'vimfiler' && exists('*fugitive#head')
          let mark = ''  " edit here for cool mark
          let _ = fugitive#head()
          return strlen(_) ? '⭠ '._ : ''
        endif
      catch
      endtry
      return ''
    endfunction

    function! MyFileformat()
      return winwidth(0) > 70 ? &fileformat : ''
    endfunction

    function! MyFiletype()
      return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype : 'no ft') : ''
    endfunction

    function! MyFileencoding()
      return winwidth(0) > 70 ? (strlen(&fenc) ? &fenc : &enc) : ''
    endfunction

    function! MyMode()
      let fname = expand('%:t')
      return fname == '__Tagbar__' ? 'Tagbar' :
            \ fname =~ 'NERD_tree' ? 'NERDTree' :
            \ &ft == 'vimfiler' ? 'VimFiler' :
            \ &ft == 'vimshell' ? 'VimShell' :
            \ winwidth(0) > 60 ? lightline#mode() : ''
    endfunction

    function! CtrlPMark()
      if expand('%:t') =~ 'ControlP'
        call lightline#link('iR'[g:lightline.ctrlp_regex])
        return lightline#concatenate([g:lightline.ctrlp_prev, g:lightline.ctrlp_item
              \ , g:lightline.ctrlp_next], 0)
      else
        return ''
      endif
    endfunction

    let g:ctrlp_status_func = {
      \ 'main': 'CtrlPStatusFunc_1',
      \ 'prog': 'CtrlPStatusFunc_2',
      \ }

    function! CtrlPStatusFunc_1(focus, byfname, regex, prev, item, next, marked)
      let g:lightline.ctrlp_regex = a:regex
      let g:lightline.ctrlp_prev = a:prev
      let g:lightline.ctrlp_item = a:item
      let g:lightline.ctrlp_next = a:next
      return lightline#statusline(0)
    endfunction

    function! CtrlPStatusFunc_2(str)
      return lightline#statusline(0)
    endfunction

    let g:tagbar_status_func = 'TagbarStatusFunc'

    function! TagbarStatusFunc(current, sort, fname, ...) abort
        let g:lightline.fname = a:fname
      return lightline#statusline(0)
    endfunction

    augroup AutoSyntastic
      autocmd!
      autocmd BufWritePost *.c,*.cpp call s:syntastic()
    augroup END
    function! s:syntastic()
      SyntasticCheck
      call lightline#update()
    endfunction

    let g:unite_force_overwrite_statusline = 0
    let g:vimfiler_force_overwrite_statusline = 0
    let g:vimshell_force_overwrite_statusline = 0
  Plug 'scrooloose/syntastic'
    let g:syntastic_javascript_jshint_args = '--config ' . $HOME . '/.jshintrc'
    let g:syntastic_enable_signs = 1 " slow downs
    let g:syntastic_check_on_open = 0 " slow downs
    let g:syntastic_disabled_filetypes = ['html', 'rst', 'java', 'md', 'markdown']
    let g:syntastic_stl_format = '[%E{%e Errors}%B{, }%W{%w Warnings}]'
    let g:syntastic_jsl_conf = '$HOME/.vim/jsl.conf'
    let g:syntastic_javascript_checkers = ['eslint', 'jshint', 'jsxhint', 'jscs']
    let g:syntastic_haml_checkers = ['haml_lint']
    let g:syntastic_ruby_checkers = ['rubocop']
    let g:syntastic_scss_checkers = ['scss_lint']
    let g:syntastic_error_symbol='✖' "
    let g:syntastic_warning_symbol='⚑'
    let g:syntastic_html_tidy_ignore_errors=[" proprietary attribute \"ng-"]
    let g:syntastic_javascript_jshint_exec = '/usr/local/bin/jshint'
    let g:syntastic_quiet_messages = { "type": "style" }
    let g:syntastic_mode_map = { 'mode': 'passive', 'active_filetypes': [], 'passive_filetypes': [] }
    " Always add any detected errors into the location list
    let g:syntastic_always_populate_loc_list = 1
    " Don't auto-open it when errors/warnings are detected, but auto-close when no
    " more errors/warnings are detected.
    let g:syntastic_auto_loc_list = 2
    " Highlight syntax errors where possible
    let g:syntastic_enable_highlighting = 1
    " Show this many errors/warnings at a time in the location list
    let g:syntastic_loc_list_height = 5
    " Don't run checkers when saving and quitting--only on saving
    let g:syntastic_check_on_wq = 0
  Plug 'luochen1990/rainbow'
    let g:rainbow_conf = {
      \ 'separately' : { 'agsv' : 0 }
      \ }
    let g:rainbow_active = 1
  Plug 'eiginn/netrw'
    let g:netrw_altv          = 1 " open files on right
    let g:netrw_fastbrowse    = 2
    let g:netrw_keepdir       = 0
    let g:netrw_liststyle     = 3 " 0 for thin
    let g:netrw_retmap        = 1
    let g:netrw_silent        = 1
    let g:netrw_special_syntax= 1
    let g:netrw_list_hide='\(^\|\s\s\)\zs\.\S\+'
    let g:netrw_hide=1              " hide hidden files
    let g:netrw_dirhistmax=100      " keep more history
    let g:netrw_altfile=1           " last edited file '#'
    let g:netrw_altv=1              " open files on right
    let g:netrw_preview=1           " open previews vertically
    let g:netrw_use_errorwindow=0   " suppress error window
    let g:netrw_winsize=20

  """"" Utilities ===========================================================
  Plug 'tomtom/tcomment_vim'
  Plug 'sickill/vim-pasta'
  Plug 'zaiste/tmux.vim'
  Plug 'haya14busa/incsearch.vim'
  Plug 'jordwalke/VimAutoMakeDirectory'
  Plug 'Raimondi/delimitMate'
  Plug 'tpope/vim-endwise'
  Plug 'tpope/vim-unimpaired'
  Plug 'tpope/vim-eunuch'
  Plug 'tpope/vim-surround'
  Plug 'tpope/vim-repeat'
  Plug 'tpope/vim-dispatch'

  Plug 'skalnik/vim-vroom'
    let g:vroom_use_colors=1
    let g:vroom_map_keys = 0
  Plug 'Valloric/ListToggle'
    let g:lt_location_list_toggle_map = '<F3>'
    let g:lt_quickfix_list_toggle_map = '<F4>'

  """"" Filetypes ===========================================================
  Plug 'sheerun/vim-polyglot'

  """"""" Go
  Plug 'fatih/vim-go'
    let g:go_highlight_functions = 1
    let g:go_highlight_methods = 1
    let g:go_highlight_structs = 1
    let g:go_highlight_operators = 1
    let g:go_highlight_build_constraints = 1
    let g:go_fmt_command = "goimports" " format with goimports instead of gofmt

  """"""" Ruby
  Plug 'vim-ruby/vim-ruby'
  Plug 'tpope/vim-rails'
  Plug 'tpope/vim-rake'

  """"""" Misc
    let g:markdown_fenced_languages = ['coffee', 'css', 'erb=eruby', 'javascript', 'js=javascript', 'json=javascript', 'ruby', 'sass', 'xml', 'html', 'bash=sh', 'sh', 'scss', 'zsh']

  """"""" JavaScript
  Plug 'pangloss/vim-javascript' " breaks rainbow parens, but does correct JS indentions :(
  Plug 'jelera/vim-javascript-syntax'
  Plug 'othree/javascript-libraries-syntax.vim'
  Plug 'lukaszb/vim-web-indent'
  Plug 'Shutnik/jshint2.vim'
  Plug 'mxw/vim-jsx'
  Plug 'burnettk/vim-angular'

  """"" Code Navigation======================================================
  """"""" Text objects
  " Plug 'kana/vim-textobj-function'
  " Plug 'kana/vim-textobj-user'
  " Plug 'mattn/vim-textobj-url'
  " Plug 'nelstrom/vim-textobj-rubyblock'
  " Plug 'whatyouhide/vim-textobj-xmlattr'

  Plug 'Lokaltog/vim-easymotion'
  Plug 'wellle/targets.vim'
  Plug 'EinfachToll/DidYouMean'
  Plug 'tpope/vim-vinegar' " navigate up a directory with '-' in netrw, among other things
  Plug 'majutsushi/tagbar'
    let g:tagbar_type_go = {
      \ 'ctagstype' : 'go',
      \ 'kinds'     : [
          \ 'p:package',
          \ 'i:imports:1',
          \ 'c:constants',
          \ 'v:variables',
          \ 't:types',
          \ 'n:interfaces',
          \ 'w:fields',
          \ 'e:embedded',
          \ 'm:methods',
          \ 'r:constructor',
          \ 'f:functions'
      \ ],
      \ 'sro' : '.',
      \ 'kind2scope' : {
          \ 't' : 'ctype',
          \ 'n' : 'ntype'
      \ },
      \ 'scope2kind' : {
          \ 'ctype' : 't',
          \ 'ntype' : 'n'
      \ },
      \ 'ctagsbin'  : 'gotags',
      \ 'ctagsargs' : '-sort -silent'
    \ }

  Plug 'ervandew/supertab'
    let g:SuperTabDefaultCompletionType = '<C-n>'
    let g:SuperTabCrMapping = 0
  Plug 'valloric/youcompleteme', { 'dir': '~/.vim/bundle/YouCompleteMe', 'do': './install.sh --clang-completer'}
    " allow for better for YouCompleteMe/UltiSnips compatibility (with supertab)
    " http://stackoverflow.com/a/22253548/1626737 and https://github.com/lencioni/dotfiles/blob/master/.vim/plugin/autocomplete.vim
    let g:ycm_key_list_select_completion   = ['<C-j>', '<C-n>', '<Down>']
    let g:ycm_key_list_previous_completion = ['<C-k>', '<C-p>', '<Up>']
    let g:ycm_collect_identifiers_from_tags_files = 1
    let g:ycm_seed_identifiers_with_syntax = 1

  Plug 'kien/ctrlp.vim'
    let g:ctrlp_match_window = 'bottom,order:btt'    " Order matching files top to bottom
    let g:ctrlp_switch_buffer=0            " open files in new buffers
    let g:ctrlp_working_path_mode = 'ra'   " Our working path is our VCS project or the current directory
    let g:ctrlp_mru_files = 1              " Enable Most Recently Used files feature
    let g:ctrlp_jump_to_buffer = 2         " Jump to tab AND buffer if already open
    let g:ctrlp_open_new_file = 'v'        " open selections in a vertical split
    let g:ctrlp_open_multiple_files = 'vr' " opens multiple selections in vertical splits to the right
    let g:ctrlp_arg_map = 0
    let g:ctrlp_dotfiles = 0               " do not show (.) dotfiles in match list
    let g:ctrlp_showhidden = 0             " do not show hidden files in match list
    let g:ctrlp_split_window = 0
    let g:ctrlp_max_height = 20            " restrict match list to a maxheight of 40
    let g:ctrlp_use_caching = 0            " don't cache, we want new list immediately each time
    let g:ctrlp_max_files = 0              " no restriction on results/file list
    let g:ctrlp_working_path_mode = ''
    let g:ctrlp_custom_ignore = {
        \ 'dir':  '\v[\/]\.(git|hg|svn|gitkeep)$',
        \ 'file': '\v\.(exe|so|dll|log|gif|jpg|jpeg|png|psd|DS_Store|ctags|gitattributes)$'
        \ }
    let g:ctrlp_user_command = 'ag %s -i -l --nocolor --nogroup --hidden -g ""'
    "let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']
    let g:ctrlp_prompt_mappings = {
        \ 'AcceptSelection("e")': ['<c-e>', '<c-space>', '<2-LeftMouse>'],
        \ 'AcceptSelection("h")': ['<c-x>', '<c-cr>', '<c-s>'],
        \ 'AcceptSelection("t")': ['<c-t>'],
        \ 'AcceptSelection("v")': ['<cr>', '<RightMouse>'],
        \ 'PrtSelectMove("j")':   ['<c-j>', '<down>', '<s-tab>'],
        \ 'PrtSelectMove("k")':   ['<c-k>', '<up>', '<tab>'],
        \ 'PrtHistory(-1)':       ['<c-n>'],
        \ 'PrtHistory(1)':        ['<c-p>'],
        \ 'ToggleFocus()':        ['<c-tab>'],
        \}
  " Plug 'rking/ag.vim'
  Plug 'gabesoft/vim-ags'
    let g:ags_agexe = '/usr/local/bin/ag'
    let g:ags_agmaxcount = 50
    let g:ags_agcontext = 3
    let g:ags_agargs = {
        \ '--break'             : [ '', '' ],
        \ '--color'             : [ '', '' ],
        \ '--color-line-number' : [ '"1;30"', '' ],
        \ '--color-match'       : [ '"32;40"', '' ],
        \ '--color-path'        : [ '"1;31"', '' ],
        \ '--column'            : [ '', '' ],
        \ '--context'           : [ 'g:ags_agcontext', '-C', '3' ],
        \ '--filename'          : [ '', '' ],
        \ '--group'             : [ '', '' ],
        \ '--heading'           : [ '', '-H' ],
        \ '--max-count'         : [ 'g:ags_agmaxcount', '-m', '2000' ],
        \ '--numbers'           : [ '', '' ],
    \ }
  Plug 'megalithic/ag.vim'
    set grepprg=ag\ --nogroup\ --line-numbers\ --column\ --noheading
    let g:ackprg="ag --column --nogroup"
    let g:agprg="ag --column --nogroup --line-numbers"
    let g:aghighlight=1
    let g:ag_qhandler="copen 20"
    let g:ag_results_mapping_replacements = {
        \   'vertical_split_and_close': '<cr>',
        \   'open': 'o',
        \ }
  Plug 'inside/vim-search-pulse'
    let g:vim_search_pulse_mode = 'cursor_line'
  Plug 'kopischke/vim-fetch'

  """"" Git/Gist ============================================================
  " Plug 'tpope/vim-git'
  Plug 'tpope/vim-fugitive'
  Plug 'mattn/webapi-vim'
  Plug 'mattn/gist-vim'
    let g:gist_open_browser_after_post = 1
    let g:gist_detect_filetype = 1
    let g:gist_post_private = 1
    if has('macunix')
      let g:gist_clip_command = 'pbcopy'
    endif

  """"" Snippets ============================================================
  " Snippets information (handy!):
  " https://medium.com/brigade-engineering/sharpen-your-vim-with-snippets-767b693886db
  " Make keybindings play nice with YCM, Supertab, Ultisnips:
  " http://stackoverflow.com/questions/14896327/ultisnips-and-youcompleteme/22253548#22253548
  Plug 'SirVer/ultisnips'
    " better key bindings for UltiSnipsExpandTrigger
    let g:UltiSnipsExpandTrigger="<tab>"
    let g:UltiSnipsListSnippets="<c-tab>"
    let g:UltiSnipsJumpForwardTrigger="<tab>"
    let g:UltiSnipsJumpBackwardTrigger="<s-tab>"

  Plug 'justinj/vim-react-snippets'

  " SnipMate and its dependencies:
  Plug 'MarcWeber/vim-addon-mw-utils'
  Plug 'tomtom/tlib_vim'
  Plug 'honza/vim-snippets'

  Plug 'jwhitley/vim-matchit'
endfunction

""""" Install vim-plug Plugins (fail nicely) ====================================
try
  call plug#begin()
  call LoadPlugs()
  call plug#end()
  :catch /^Vim\%((\a\+)\)\=:E117/
  echomsg "Failed to load vim-plug and/or bundles. Perhaps vim-plg isn't installed."
  echomsg "You need to install vim-plug into ~/.vim/autoload: "
  echomsg "   mkdir -p ~/.vim/autoload"
  echomsg "   curl -fLo ~/.vim/autoload/plug.vim https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim"
  echomsg "   vim -c ':PlugInstall' -c ':qa!'"
endtry

" Enable built-in matchit plugin
runtime macros/matchit.vim


" =============================================================================
" Main Settings #msettings
" -----------------------------------------------------------------------------
""""" UI ====================================================================
""""""" Theme / Terminal
let base16colorspace=256  " Access colors present in 256 colorspac (must be before colorscheme def)
let g:hybrid_use_Xresources = 1
colorscheme base16-tomorrow
set background=dark

filetype plugin indent on
" are these 2 syntax' needed?
syntax enable
syntax on

set t_Co=256
" in case t_Co alone doesn't work, add this as well:
let &t_AB="\e[48;5;%dm"
let &t_AF="\e[38;5;%dm"
set t_ut= " improve screen clearing by using the background color (for tmux/256 color stuffs)

set enc=utf-8
set term=screen-256color
let $TERM='screen-256color'

set shell=/usr/local/bin/zsh\ --login

""""""" Layout
set linebreak
" set textwidth=79 " will auto wrap content when set
set nowrap " on is 'wrap'
set wrapscan
set synmaxcol=800 " turn off syntax highlight beyond 800 chars
set showcmd " show incomplete commands
set ruler " show the cursor position all the time
set scrolloff=5
set sidescroll=1
set sidescrolloff=10
set cul " turn on cursorline highlighting -- needed for linenumber HL too
set listchars=tab:▸\ ,eol:¬,extends:❯,precedes:❮,trail:·,nbsp:⚋
set diffopt=filler " Add vertical spaces to keep right and left aligned.
set diffopt+=iwhite " Ignore whitespace changes.
set noerrorbells
set novisualbell
set number
set splitbelow
set laststatus=2 " so we always get airline displaying / always show status
set noshowmode

" change vim cursor depending on the mode
if exists('$TMUX')
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
  let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif

" Prevent Vim from clobbering the scrollback buffer. See
" http://www.shallowsky.com/linux/noaltscreen.html
" set t_ti= t_te=

""""" Behavior ==============================================================
""""""" Swaps / Backups / Sessions / History
set undodir=/tmp
set undofile
set undoreload=500
set undolevels=500

if !strlen($SUDO_USER) && has("unix")
  " Don't store swaps in . -- store in ~/.vim/tmp/swap/%path%to%orig.swp
  set directory=~/.vim/tmp/swap//,.,/var/tmp
  " Don't store backups in . -- store in ~/.vim/tmp/backup/%path%to%orig~
  set backupdir=~/.vim/tmp/backup//,.,/var/tmp
  " Create tmp/ dir if it doesn't exist
  if !isdirectory($HOME."/.vim/tmp") && exists("*mkdir")
    call mkdir($HOME."/.vim/tmp/swap", "p", 0700)
    call mkdir($HOME."/.vim/tmp/backup", "p", 0700)
  endif
else
  set nobackup
  set nowritebackup
  set noswapfile
endif

set noswapfile "override because i hate swap files

set sessionoptions-=options " Do not save settings and mappings to sessions
set history=100

""""""" Indentions / Tabs
set autoindent
set smartindent
set smarttab
set cindent
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab

""""""" Grepping / Searching
set ignorecase
set smartcase
set incsearch
set showmatch
set hlsearch
set gdefault " assume the /g flag is on in :s substitutions

""""""" Completions
set ofu=syntaxcomplete#Complete " Set omni-completion method.
set completeopt=longest,menuone,preview
set omnifunc=syntaxcomplete#Complete
set completefunc=syntaxcomplete#Complete
set complete=.,w,b,u,U,t,i,d

""""""" Ignores
set wildmenu
set wildmode=list:longest
set wildignore+=*.jpg,*.jpeg,*.gif,*.png,*.gif,*.psd,*.o,*.obj,*.min.js
set wildignore+=*/smarty/*,*/vendor/*,*/node_modules/*,*/.git/*,*/.hg/*,*/.svn/*,*/.sass-cache/*,*/log/*,*/tmp/*,*/build/*,*/ckeditor/*,*/expert/*,*/solr/*,*/dist/*,*/bower_components/*,*/cf/*
set wildignore+=log/**,node_modules/**,target/**,tmp/**,*.rbc
set wildignore+=*.aux,*.out,*.toc                " latex intermediate files
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg   " binary images
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest " compiled object files
set wildignore+=*.spl                            " compiled spelling word lists
set wildignore+=*.sw?                            " vim swap files
set wildignore+=*.ds_store                       " osx
set wildignore+=*.luac                           " lua byte code
set wildignore+=migrations                       " django migrations
set wildignore+=*.pyc                            " python byte code
set wildignore+=*.orig                           " merge resolution files
set wildignore+=classes
set wildignore+=lib

""""""" File handling
set ttyfast
set autowrite
set autoread
set fileformats=unix,mac,dos
set lazyredraw "may be the cause of lots of issues

""""""" Mode change speedups
set noesckeys
set timeout
set timeoutlen=100
set ttimeout
set ttimeoutlen=1

""""""" Misc (Needs documentation / understanding)
set fcs=fold:-
set matchtime=3
set showbreak=↪
set report=0 " Show all changes.
set hidden
set backspace=indent,eol,start
set shiftround
" set formatoptions=qrn1 " automatic formating.
set formatoptions-=o " don't start new lines w/ comment leader on pressing 'o'
set formatoptions-=r " don't start new lines w/ comment leader on pressing 'o'
set shortmess=atI " don't show the intro message when starting vim.
set matchpairs+=<:>
let loaded_matchparen = 1 " this turns off pair matching highlight (slow)
set virtualedit+=block
set nofoldenable " dont fold by default
set magic
set mat=2
set re=1
set t_vb=
set tm=500

" add system clipboard support
set clipboard+=unnamed


""""""" Neovim
if has('nvim')
  runtime! python_setup.vim
endif

if has('nvim')
  " set unnamedclip
endif

" Neovim copy/paste support from system clipboard
if has("nvim")
  vnoremap <silent> y y:call ClipboardYank()<cr>
  vnoremap <silent> d d:call ClipboardYank()<cr>
  nnoremap <silent> p :call ClipboardPaste()<cr>p
endif


" treat certain characters as full keyword boundaries, e.g. `-`
set iskeyword+=-

" if more than 1 files are passed to vim as arg, open them in vertical splits
if argc() > 1
  silent vertical all
endif

""""""" Per project/folder vim settings
set exrc
set secure " disable unsafe commands in local .vimrc files

""""""" Why do I even have these settings? Please clean.
let g:JSHintHighlightErrorLine = 1
let javascript_fold = 1
let loaded_matchit = 1
let ruby_fold = 1
let g:js_indent_log = 1
let javascript_enable_domhtmlcss=1


" =============================================================================
" Highlighting #highlights
" -----------------------------------------------------------------------------
au BufEnter *.rb syn match ExtraWhitespace contained "\<binding.pry\>"
au BufEnter *.js syn match ExtraWhitespace contained "\<debugger\>"
au BufEnter *.rb syn match error contained "\<binding.pry\>"
au BufEnter *.rb syn match error contained "\<debugger\>"
au BufEnter *.js syn match error contained "\<debugger\>"
au ColorScheme * hi ExtraWhitespace ctermbg=red guibg=red
au ColorScheme * hi error ctermbg=red guibg=red
au Syntax * syn match ExtraWhitespace /\s\+$\| \+\ze\\t/

hi ColorColumn ctermfg=232 ctermbg=238 guibg=#262626
hi ExtraWhitespace ctermbg=red guibg=red
hi SyntasticError ctermbg=red term=bold
hi CursorLineNr term=bold ctermbg=144

" better tmate UX for other pairers ⇊
" hi CursorLine ctermbg=none
hi NonText ctermfg=24
hi SpecialKey ctermfg=24 guibg=NONE
hi Search term=underline ctermbg=144

" italicize comments
" hi Comment cterm=italic

match ErrorMsg '^\(<\|=\|>\)\{7\}\([^=].\+\)\?$'
match ExtraWhitespace /\s\+\%#\@<!$/


" =============================================================================
" Custom Functions #cfunctions
" -----------------------------------------------------------------------------
" Used by Fugitive
function! BufReadIndex()
  " Use j/k in status
  setlocal nohlsearch
  nnoremap <buffer> <silent> j :call search('^#\t.*','W')<Bar>.<CR>
  nnoremap <buffer> <silent> k :call search('^#\t.*','Wbe')<Bar>.<CR>
endfunction

" Used by Fugitive
function! BufEnterCommit()
  " Start in insert mode for commit
  normal gg0
  if getline('.') == ''
    start
  end
  " force spell when doing a git commit
  if  bufname("%")=="COMMIT_EDITMSG"
      set spell
      set spelllang=en
  endif
endfunction

" Delete trailing white space on save, useful for Python and CoffeeScript ;)
function! DeleteTrailingWS()
  exe "normal mz"
  %s/\s\+$//ge
  exe "normal `z"
endfunction

" prevent replacing paste buffer on paste:
" vp doesn't replace paste buffer
function! RestoreRegister()
  let @" = s:restore_reg
  return ''
endfunction
function! s:Repl()
  let s:restore_reg = @"
  return "p@=RestoreRegister()\<cr>"
endfunction

" Neovim support for system clipboard in OSX
function! ClipboardYank()
  call system('pbcopy', @@)
endfunction
function! ClipboardPaste()
  let @@ = system('pbpaste')
endfunction

function! FileTypeToggle(num)
  if a:num > 0 || !exists("b:alt_ftype")
    let b:alt_ftype = &filetype
    let   &filetype = input("enter FileType: ")
  else
    let     new_alt = &filetype
    let   &filetype = b:alt_ftype
    let b:alt_ftype = new_alt
  end
endfunction

""" Netrw functionality
function! VexToggle(dir)
  if exists("t:vex_buf_nr")
    call VexClose()
  else
    call VexOpen(a:dir)
  endif
endfunction
function! VexOpen(dir)
  let g:netrw_browse_split = 4
  let vex_width = 25
  execute "Vexplore " . a:dir
  let t:vex_buf_nr = bufnr("%")
  wincmd H
  call VexSize(vex_width)
endfunction
function! VexClose()
  let cur_win_nr = winnr()
  let target_nr = ( cur_win_nr == 1 ? winnr("#") : cur_win_nr )
  1wincmd w
  close
  unlet t:vex_buf_nr
  execute (target_nr - 1) . "wincmd w"
  call NormalizeWidths()
endfunction
function! VexSize(vex_width)
  execute "vertical resize" . a:vex_width
  set winfixwidth
  call NormalizeWidths()
endfunction
function! NormalizeWidths()
  let eadir_pref = &eadirection
  set eadirection=hor
  set equalalways! equalalways!
  let &eadirection = eadir_pref
endfunction

" =============================================================================
" Autocommands #autocommands
" -----------------------------------------------------------------------------
if exists('+colorcolumn')
  augroup UnSyntaxInactiveGroup
    autocmd!
    autocmd BufEnter,WinEnter * set syntax=ON
    autocmd BufEnter,WinEnter * set number

    autocmd BufLeave,WinLeave * set syntax=OFF
    autocmd BufLeave,WinLeave * set nonumber
  augroup END
endif

augroup TmuxGroup
  autocmd!
  autocmd VimEnter,BufNewFile,BufReadPost * call system('tmux rename-window "vim - ' . split(substitute(getcwd(), $HOME, '~', ''), '/')[-1] . '"')
  autocmd VimLeave * call system('tmux rename-window ' . split(substitute(getcwd(), $HOME, '~', ''), '/')[-1])
augroup END

augroup ReturnToLastEditedLineGroup
  autocmd!
  autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \     execute 'normal! g`"zvzz' |
    \ endif
augroup END

" Delete trailing whitespace on write
autocmd BufWrite * silent call DeleteTrailingWS()

" Resize splits when the window is resized
autocmd VimResized * :wincmd =

augroup ColorColumnGroup
  " Color Column (only on insert)
  if exists("&colorcolumn")
    autocmd InsertEnter * set colorcolumn=80
    autocmd InsertLeave * set colorcolumn=""
  endif

  if exists('+colorcolumn')
    " set colorcolumn=80
  else
    au BufWinEnter * let w:m2=matchadd('ErrorMsg', '\%>80v.\+', -1)
  endif
augroup END

augroup GitGroup
  autocmd!
  " Handles tpope/fugitive auto-commands
  autocmd BufNewFile,BufRead .git/index setlocal nolist
  autocmd BufReadPost fugitive://* set bufhidden=delete

  autocmd BufReadCmd *.git/index exe BufReadIndex()
  autocmd BufEnter *.git/index silent normal gg0j
  autocmd BufEnter *.git/COMMIT_EDITMSG exe BufEnterCommit()
augroup END


" =============================================================================
" Filetypes / Syntax #ftypes
" -----------------------------------------------------------------------------
augroup filetypes
  " clear commands before resetting
  autocmd!

  " Markdown turn off lazyredraw
  autocmd BufNewFile,BufReadPost *.md,*.mdown,*.markdown set nolazyredraw filetype=markdown
  autocmd BufNewFile,BufReadPost *.md,*.mdown,*.markdown set filetype=markdown
  autocmd FileType markdown set tw=80

  " filetype
  autocmd BufNewFile,BufRead *.json set filetype=json
  autocmd BufNewFile,BufRead *.slim set filetype=slim
  autocmd BufNewFile,BufRead *.less set filetype=less
  autocmd BufNewFile,BufRead *.scss set filetype=sass

  " load rainbow parens
  autocmd FileType js,jsx,css,scss,sass,less,json call rainbow#load()

  autocmd BufNewFile,BufRead,BufWritePost *[Ss]pec*js,*SpecHelper*js set filetype=jasmine.javascript syntax=jasmine

  " Enable omnicomplete for supported filetypes
  autocmd FileType css,scss,sass,less setlocal omnifunc=csscomplete#CompleteCSS
  autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
  autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS

  " jscomplete is a separate plugin
  autocmd FileType javascript setlocal omnifunc=jscomplete#CompleteJS
  autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
  autocmd FileType xml exe ":silent 1,$!xmllint --format --recover - 2>/dev/null"

  " make `gf` search for .js files
  autocmd FileType javascript setlocal suffixesadd=.js
  autocmd FileType javascript setlocal path+=js,scripts

  " make sure `complete` works as expected for CSS class names whithout
  " messing with motions (eg. '.foo-bar__baz') and we make sure all
  " delimiters (_,-,$,%,.) are treated as word separators outside insert mode
  autocmd InsertEnter,BufLeave * setl iskeyword=@,48-57,192-255,\@,\$,%,-,_
  autocmd InsertLeave,BufEnter * setl iskeyword=@,48-57,192-255

"   autocmd BufNewFile,BufRead *.js.jsx set ft=javascript.jsx
"   autocmd BufNewFile,BufRead *{_spec,Spec}.js.jsx set ft=javascript.jsx.jasmine
"   autocmd BufNewFile,BufRead *.html,*.js call s:DetectJSX(expand("<afile>"))
augroup END


" =============================================================================
" Keybindings #bindings
" TODO: this area needs lots of cleanup and re-evaluation
" -----------------------------------------------------------------------------
let mapleader=","
let maplocalleader="\\"

""""""" CtrlP
let g:ctrlp_map = '<leader>m'
let g:ctrlp_cmd = 'CtrlP'

""""""" Netrw
nnoremap <F2> :Vexplore . <cr>
" noremap <F2> :call VexToggle(getcwd())<CR>
" noremap <S-F2> :call VexToggle("")<CR>

""""""" Tcomment
nmap <leader>c :TComment<cr>
vmap <leader>c :TComment<cr>

""""""" Vundle
noremap <F5> :PlugUpdate<cr>
map <F5> :PlugUpdate<cr>

""""""" CTags
noremap <F6> :!ctags -R<cr>

" For snippet_complete marker.
if has('conceal')
  set conceallevel=2 concealcursor=i
endif

""""""" Tagbar
nmap <F8> :TagbarToggle<CR>

"""""" Dispatch
nnoremap <F9> :Dispatch<CR>

""""""" Golang
au FileType go nnoremap <leader>gr :GoRun<cr>
au FileType go nnoremap <leader>gb :GoBuild<cr>
au FileType go nnoremap <leader>t :Dispatch :GoTest<cr>
au FileType go nnoremap <leader>gc :GoCoverage<cr>

""""""" Fugitive
nnoremap <leader>H :Gbrowse<cr>
vnoremap <leader>H :Gbrowse<cr>
nnoremap <leader>gb :Gblame<cr>

""""""" Ag / Ack
nnoremap <leader>a :Ag!<space>
nnoremap <leader>a :Ags<space>
nnoremap <leader>A :LAg!<space>
" immediately ag/ack/grep for word under cursor
map <leader>/ :execute "LAg! " . expand("<cword>") <CR>
vmap <leader>/ :execute "LAg! " . S <CR>

""""""" Vroom
silent! map <unique> <Leader>t :VroomRunTestFile<CR>
silent! map <unique> <Leader>T :VroomRunNearestTest<CR>
silent! map <unique> <Leader>l :VroomRunLastTest<CR>

""""""" Gist
" Send visual selection to gist.github.com as a private, filetyped Gist
" Requires the gist command line too (brew install gist)
vnoremap <leader>G :Gist -p<cr>

""""""" Syntastic
nnoremap <leader>e :SyntasticToggleMode<cr> :SyntasticCheck<cr>

""""""" Surround
vmap [ S]
vmap ( S)
vmap { S}
" vmap ] S[
" vmap ) S(
" vmap } S{
vmap ' S'
vmap " S"

""""""" Code Formatting
map <leader>pj :%!python -m json.tool<CR>
map <leader>px :%!xmllint % --format<CR>

""""""" Quick edit of certain files
nnoremap <leader>ev :vsplit ~/.dotfiles/vim/vimrc.symlink<cr>
nnoremap <leader>ez :vsplit ~/.zshrc<cr>
nnoremap <leader>et :vsplit ~/.tmux.conf<cr>

""""""" Tab manipulation
" Make opening files in a new tab easier
nmap <C-t> :tabnew<space>
nmap <C-e> :edit<space> <C-d>

""""""" Motions
noremap j gj
noremap k gk
noremap gj j
noremap gk k

""""""" Splits with vim-tmux-navigator
let g:tmux_navigator_no_mappings = 1
let g:tmux_navigator_save_on_switch = 1
nnoremap <silent> <C-H> :TmuxNavigateLeft<cr>
nnoremap <silent> <C-J> :TmuxNavigateDown<cr>
nnoremap <silent> <C-K> :TmuxNavigateUp<cr>
nnoremap <silent> <C-L> :TmuxNavigateRight<cr>

nnoremap <c-o> :vnew<cr>:e<space><c-d>
nnoremap <c-n> :vsp .<cr>

""""""" Just say no to drugs
" disable arrow keys
nmap <Up> <Nop>
nmap <Down> <Nop>
vmap <Up> <Nop>
vmap <Down> <Nop>
nmap <Left> <Nop>
nmap <Right> <Nop>
vmap <Left> <Nop>
vmap <Right> <Nop>
" this always does annoying things for some reason, so stop it
noremap K <nop>
" stop changing casing when in visual mode
vnoremap u <nop>

""""""" Writing / quitting
nnoremap <leader>w :w<cr>
nnoremap <leader>q :q<cr>
" Sudo write (,W)
noremap <silent><leader>W :w !sudo tee %<CR>

""""""" Vim process management
" background VIM
vnoremap <c-z> <esc>zv`<ztgv

""""""" Search / Substitutions / Replacements
nnoremap <silent><Leader><space> :nohls<CR>
nnoremap / /\v
vnoremap / /\v
" Keep search matches in the middle of the window.
nnoremap <silent> n nzzzv
nnoremap <silent> N Nzzzv
" Keep search matches jumping around
nnoremap g; g;zz
nnoremap g, g,zz
" Search and replace word under cursor (,*)
" nnoremap <leader>fr :%s/\<<C-r><C-w>\>//<Left>
nnoremap <leader>fr :%s#\<<C-r>=expand("<cword>")<CR>\>#
" Use word under cursor into lhs of a substitute (for quick search and replace)
nnoremap <leader>r :%s/\<<C-r>=expand("<cword>")<CR>\>/

""""""" Copy/Paste
noremap <leader>y "*y
noremap <leader>yy "*Y
"don't move the cursor after pasting
"(by jumping to back start of previously changed text)
noremap p p`[
noremap P P`[
nnoremap Y y$
vmap <silent><leader>y "xy
map <silent><leader>p "xp
vmap <silent> <expr> p <sid>Repl()

""""""" ESC rebindings
inoremap <F1> <ESC>
nnoremap <F1> <ESC>
vnoremap <F1> <ESC>

""""""" Convenience rebindings
" semicolon is easier to hit than colon
nnoremap ; :
noremap  <C-;>       :!
noremap  <Leader>:       :<Up>
" remap q for recording to Q
nnoremap Q q
nnoremap q <Nop>
"allow deleting selection without updating the clipboard (yank buffer)
vnoremap x "_x
vnoremap X "_X
" Easier to type, and I never use the default behavior.
noremap H ^
noremap L $
vnoremap L g_
"make the tab key match bracket pairs
map <tab> %
noremap <tab> %
vnoremap <tab> %
" Better mark jumping (line + col)
nnoremap ' <nop>
" Remap VIM 0 to first non-blank character
map 0 ^

""""""" Selections
" reselect pasted content:
noremap gV `[v`]
" select all text on the page
noremap <leader>v ggVG
" Easier linewise reselection of what you just pasted.
nnoremap <leader>V V`]
" duplicate whatever’s selected, to the next line
vmap D y'>p

""""""" Indentions
" Indent/dedent/autoindent what you just pasted.
nnoremap <lt>> V`]<
nnoremap ><lt> V`]>
nnoremap =- V`]=
" Reindent the whole document and keep the cursor in the same location
nnoremap <C-=> mqHmwgg=G`wzt`q


""""""" Misc (organize this please!)
" Insert newline below
nnoremap <cr><cr> o<ESC>
" push newline
nnoremap <S-CR>   mzO<Esc>j`z
nnoremap <C-CR>   mzo<Esc>k`z
" spawn newline
inoremap <S-CR>     <C-O>O
inoremap <C-CR>     <C-O>o

" Toggle 'keep current line in the center of the screen' mode
nnoremap <leader>C :let &scrolloff=999-&scrolloff<cr>
"
" gi already moves to 'last place you exited insert mode', so we'll map gI to
" something similar: move to last change
nnoremap gI `.

" Make D behave
nnoremap D d$

" Delete a line and not keep it in a register
nnoremap X Vx

" Insert Mode Completion
inoremap <c-f> <c-x><c-f>
inoremap <c-]> <c-x><c-]>

" Redraw my screen
nnoremap U :syntax sync fromstart<cr>:redraw!<cr>

" Select (charwise) the contents of the current line, excluding indentation.
" Great for pasting Python lines into REPLs.
nnoremap vv ^vg_

" Keep the cursor in place while joining lines
nnoremap J mzJ`z

" Split line (sister to [J]oin lines above)
" The normal use of S is covered by cc, so don't worry about shadowing it.
nnoremap S i<cr><esc>^mwgk:silent! s/\v +$//<cr>:noh<cr>`w

" Insert the directory of the current buffer in command line mode
cnoremap <expr> %% getcmdtype() == ':' ? expand('%:h').'/' : '%%'

" Insert mode movements
" Ctrl-e: Go to end of line
inoremap <c-e> <esc>A
" Ctrl-a: Go to begin of line
inoremap <c-a> <esc>I


" =============================================================================
" Abbreviations #abbrev
" These are insert-mode abbreviations
" -----------------------------------------------------------------------------
" Autocorrect my common typos
iab Connectiosn Connections
iab Cound Could
iab SOme Some
iab THat That
iab THe The
iab THere There
iab THerefore Therefore
iab THese These
iab THis This
iab THose Those
iab WHen When
iab connectiosn connections
iab cound could
iab functino function
iab indentatino indentation
iab optiosn options
iab taht that
iab teh the
