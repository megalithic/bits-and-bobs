#!/bin/bash

set -e

git clone --recursive https://github.com/megalithic/dotfiles.git ~/.dotfiles
cd ~/.dotfiles

export DOTFILES_ROOT="`pwd`"
export ZSH=$HOME/.dotfiles

source ./setup/lib.sh

prepare_ssh_key () {
  user "Do you want to setup ssh keys? (y|n)"

  read -n 1 action
  case "$action" in
    y )
      action 'Checking for SSH key, generating one if it does not exist...'
        if ![[ -f '~/.ssh/id_rsa.pub' ]]
        then
          ssh-keygen -t rsa -b 4096 -C "seth.messer@gmail.com";ok
        fi

      action 'Add key to ssh-agent...'
        eval "$(ssh-agent -s)"
        ssh-add ~/.ssh/id_rsa;ok

      action 'Copying public key to clipboard. Paste it into your Github account...'
        if [[ -f '~/.ssh/id_rsa.pub' ]]
        then
          pbcopy < ~/.ssh/id_rsa.pub;ok
          open 'https://github.com/account/ssh'
        fi

      bot "To verify the key was setup correctly: `ssh -T git@github.com`..."
      ;;
    n )
      success "Skipping ssh key setup..."
      ;;
    * )
      success "Skipping ssh key setup..."
      ;;
  esac
}

link_files () {
  action "linking $1 to $2"
  ln -s $1 $2;ok
}

symlink_dotfiles () {
  bot 'installing dotfiles'

  overwrite_all=false
  backup_all=false
  skip_all=false

  for source in `find $DOTFILES_ROOT -maxdepth 2 -name \*.symlink`
  do
    dest="$HOME/.`basename \"${source%.*}\"`"

    if [ -f $dest ] || [ -d $dest ]
    then
      overwrite=false
      backup=false
      skip=false

      if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
      then
        user "File already exists: `basename $source`, what do you want to do? [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac
      fi

      if [ "$overwrite" == "true" ] || [ "$overwrite_all" == "true" ]
      then
        rm -rf $dest
        success "removed $dest"
      fi

      if [ "$backup" == "true" ] || [ "$backup_all" == "true" ]
      then
        mv $dest $dest\.backup
        success "moved $dest to $dest.backup"
      fi

      if [ "$skip" == "false" ] && [ "$skip_all" == "false" ]
      then
        link_files $source $dest
      else
        success "skipped $source"
      fi

    else
      link_files $source $dest
    fi
  done
}

setup_private_repo () {
  bot "Attempting to clone your private dotfiles repo to $HOME/.dotfiles/private ..."

  warn "Note: if you have 2-factor authentication enabled, you'll need to enter a personal access token when using https:// repo urls."
  user ' - What is your private github repo address? (Leave blank to skip)'
  read -e git_privaterepo

  if [ "$git_privaterepo" == "" ]
  then
    warn "Skipping private repo setup ..."
  else
    action "cloning $git_privaterepo to ~/.dotfiles/private"
    rm -rf ~/.dotfiles/private
    git clone $git_privaterepo ~/.dotfiles/private;ok

    action 'executing private dotfiles repo install script'
    sh ~/.dotfiles/private/install.sh;ok
  fi
}

run_install_scripts () {
  bot "Installing topic-based install.sh scripts..."
  for source in `find $ZSH -not \( -path $ZSH/homebrew -prune \) -not \( -path $ZSH/private -prune \) -name \install.sh`
  do
    action "installing $source"
    sh $source
    ok
  done
}

setup_osx_essentials () {
  ############################################
  bot "setting up so many osx essentials..." #
  ############################################

  cd ~/.dotfiles

  action "installing xcode"
  sudo xcodebuild -license;ok

  action "installing homebrew stuff"
  sh ./homebrew/install.sh;ok

  action "setting zsh stuff"
  sh ./zsh/install.sh;ok

  action "setting osx defaults"
  sh ./osx/set_defaults.sh;ok
}



## RUN THROUGH OUR STEPS
#  ============================================================================
prepare_ssh_key
setup_osx_essentials
run_install_scripts
symlink_dotfiles
setup_private_repo
