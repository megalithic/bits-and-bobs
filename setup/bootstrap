#!/bin/bash

git clone --recursive https://github.com/megalithic/dotfiles.git ~/.dotfiles
cd ~/.dotfiles

export DOTFILES_ROOT="`pwd`"
export ZSH=$HOME/.dotfiles

info () {
  printf "  [ \033[00;34m..\033[0m ] $1"
}

user () {
  printf "\r  [ \033[0;33m?\033[0m ] $1 "
}

success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit
}

prepare_ssh_key () {
  echo 'Checking for SSH key, generating one if it does not exist...'
    [[ -f '~/.ssh/id_rsa.pub' ]] || ssh-keygen -t rsa -b 4096 -C "seth.messer@gmail.com"
    # [[ -f '~/.ssh/id_rsa.pub' ]] || ssh-keygen -t rsa

  echo 'Add key to ssh-agent...'
    eval "$(ssh-agent -s)"
    ssh-add ~/.ssh/id_rsa

  echo 'Copying public key to clipboard. Paste it into your Github account...'
    [[ -f '~/.ssh/id_rsa.pub' ]] && pbcopy < ~/.ssh/id_rsa.pub
    # [[ -f '~/.ssh/id_rsa.pub' ]] && cat '~/.ssh/id_rsa.pub' | pbcopy
    open 'https://github.com/account/ssh'

  echo 'To verify the key was setup correctly: `ssh -T git@github.com`...'
}

link_files () {
  ln -s $1 $2
  success "linked $1 to $2"
}

symlink_dotfiles () {
  info 'installing dotfiles'

  overwrite_all=false
  backup_all=false
  skip_all=false

  for source in `find $DOTFILES_ROOT -maxdepth 2 -name \*.symlink`
  do
    dest="$HOME/.`basename \"${source%.*}\"`"

    if [ -f $dest ] || [ -d $dest ]
    then
      overwrite=false
      backup=false
      skip=false

      if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
      then
        user "File already exists: `basename $source`, what do you want to do? [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac
      fi

      if [ "$overwrite" == "true" ] || [ "$overwrite_all" == "true" ]
      then
        rm -rf $dest
        success "removed $dest"
      fi

      if [ "$backup" == "true" ] || [ "$backup_all" == "true" ]
      then
        mv $dest $dest\.backup
        success "moved $dest to $dest.backup"
      fi

      if [ "$skip" == "false" ] && [ "$skip_all" == "false" ]
      then
        link_files $source $dest
      else
        success "skipped $source"
      fi

    else
      link_files $source $dest
    fi
  done
}

setup_private_repo () {
  echo "Attempting to clone your private dotfiles repo to $HOME/.dotfiles/private ..."

  echo "Note: if you have 2-factor authentication enabled, you'll need to enter a personal access token when using https:// repo urls."
  user ' - What is your private github repo address? (Leave blank to skip)'
  read -e git_privaterepo

  if [ "$git_privaterepo" == "" ]
  then
    echo "Skipping private repo setup ..."
  else
    rm -rf ~/.dotfiles/private
    git clone $git_privaterepo ~/.dotfiles/private
    success "cloned $git_privaterepo to ~/.dotfiles/private"

    sh ~/.dotfiles/private/install.sh
    success 'executed private dotfiles repo install script'
  fi
}

run_install_scripts () {
  # Install topic-based install.sh scripts
  info "Installing topic-based install.sh scripts..."
  # for source in `find $ZSH -maxdepth 2 -and -not -path $ZSH/homebrew -and -not -path $ZSH/private -name \install.sh`
  for source in `find $ZSH -not \( -path $ZSH/homebrew -prune \) -not \( -path $ZSH/private -prune \) -name \install.sh`
  do
    sh $source
  done
}

init_install () {
  cd $ZSH
  sh ./setup/install.sh
}



## RUN THROUGH OUR STEPS
#  ============================================================================
prepare_ssh_key
init_install
run_install_scripts
symlink_dotfiles
setup_private_repo

