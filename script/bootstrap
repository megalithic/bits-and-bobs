#!/usr/bin/env bash
#
# bootstrap installs things.

DOTFILES_ROOT="`pwd`"

set -e

echo ''

info () {
  printf "  [ \033[00;34m..\033[0m ] $1"
}

user () {
  printf "\r  [ \033[0;33m?\033[0m ] $1 "
}

success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit
}

install_xcode_commandline_tools () {
  user ' - Check and install XCode Command-line Tools if necessary? [yes|no]'
  read -e bool_installxcode

  if [ "$bool_installxcode" == "yes" ]
  then
    OSX_VERS=$(sw_vers -productVersion | awk -F "." '{print $2}')
     
    # Get Xcode CLI tools
    # https://devimages.apple.com.edgekey.net/downloads/xcode/simulators/index-3905972D-B609-49CE-8D06-51ADC78E07BC.dvtdownloadableindex
    # Find Xcode CLI Tools versions with:
    # `curl -Ls https://devimages.apple.com.edgekey.net/downloads/xcode/simulators/index-3905972D-B609-49CE-8D06-51ADC78E07BC.dvtdownloadableindex | plutil -convert json -o - - | python -mjson.tool | less`

    TOOLS=clitools.dmg
    if [ ! -f "$TOOLS" ]; then
      if [ "$OSX_VERS" -eq 7 ]; then
        DMGURL=http://devimages.apple.com/downloads/xcode/command_line_tools_for_xcode_os_x_lion_april_2013.dmg
      elif [ "$OSX_VERS" -eq 8 ]; then
          DMGURL=http://devimages.apple.com/downloads/xcode/command_line_tools_for_xcode_os_x_mountain_lion_april_2013.dmg
      elif [ "$OSX_VERS" -eq 9 ]; then
        DMGURL=http://adcdownload.apple.com/Developer_Tools/command_line_tools_os_x_mavericks_for_xcode__late_october_2013/command_line_tools_os_x_mavericks_for_xcode__late_october_2013.dmg
      fi
      curl "$DMGURL" -o "$TOOLS"
    fi
    TMPMOUNT=`/usr/bin/mktemp -d /tmp/clitools.XXXX`
    hdiutil attach "$TOOLS" -mountpoint "$TMPMOUNT"
    installer -pkg "$(find $TMPMOUNT -name '*.mpkg')" -target /
    hdiutil detach "$TMPMOUNT"
    rm -rf "$TMPMOUNT"
    rm "$TOOLS"
    exit
  else
    echo "Skipping XCode Command-line Tools install ..."
  fi
}

prepare_ssh_key () {
  echo 'Enter new hostname of the machine (e.g. replibook)'
    read hostname
    echo "Setting new hostname to $hostname..."
    scutil --set HostName "$hostname"
    compname=$(sudo scutil --get HostName | tr '-' '.')
    echo "Setting computer name to $compname"
    scutil --set ComputerName "$compname"

  echo 'Checking for SSH key, generating one if it does not exist...'
    [[ -f '~/.ssh/id_rsa.pub' ]] || ssh-keygen -t rsa

  echo 'Copying public key to clipboard. Paste it into your Github account...'
    [[ -f '~/.ssh/id_rsa.pub' ]] && cat '~/.ssh/id_rsa.pub' | pbcopy
    open 'https://github.com/account/ssh'
}

setup_gitconfig () {
  if ! [ -f git/gitconfig.symlink ]
  then
    info 'setup gitconfig'

    git_credential='cache'
    if [ "$(uname -s)" == "Darwin" ]
    then
      git_credential='osxkeychain'
    fi

    user ' - What is your github author name?'
    read -e git_authorname
    user ' - What is your github author email?'
    read -e git_authoremail
    user ' - What is your github author username?'
    read -e git_authorusername

    sed -e "s/AUTHORNAME/$git_authorname/g" -e "s/AUTHOREMAIL/$git_authoremail/g" -e "s/AUTHORUSERNAME/$git_authorusername/g" -e "s/GIT_CREDENTIAL_HELPER/$git_credential/g" git/gitconfig.symlink.example > git/gitconfig.symlink

    success 'gitconfig'
  fi
}

link_files () {
  ln -s $1 $2
  success "linked $1 to $2"
}

install_dotfiles () {
  info 'installing dotfiles'

  overwrite_all=false
  backup_all=false
  skip_all=false

  for source in `find $DOTFILES_ROOT -maxdepth 2 -name \*.symlink`
  do
    dest="$HOME/.`basename \"${source%.*}\"`"

    if [ -f $dest ] || [ -d $dest ]
    then

      overwrite=false
      backup=false
      skip=false

      if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
      then
        user "File already exists: `basename $source`, what do you want to do? [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac
      fi

      if [ "$overwrite" == "true" ] || [ "$overwrite_all" == "true" ]
      then
        rm -rf $dest
        success "removed $dest"
      fi

      if [ "$backup" == "true" ] || [ "$backup_all" == "true" ]
      then
        mv $dest $dest\.backup
        success "moved $dest to $dest.backup"
      fi

      if [ "$skip" == "false" ] && [ "$skip_all" == "false" ]
      then
        link_files $source $dest
      else
        success "skipped $source"
      fi

    else
      link_files $source $dest
    fi
  done
}

additional_symlinking () {
  echo "Symlinking misc other files and directories ..."
  # so we have common apache functionality with other nix distros
  ln -sf /Library/WebServer/Documents /var/www
}

setup_private_repo () {
  echo "Attempting to clone your private dotfiles repo to $HOME/.dotfiles/private ..."

  user ' - What is your private github repo address? Leave blank to skip.'
  read -e git_privaterepo

  if [ "$git_privaterepo" == "" ]
  then
    echo "Skipping private repo setup ..."
  else
    git submodule add -f $git_privaterepo $ZSH/private
    git submodule update --init
    git commit -am "Adding submodule for private repo"
    git push origin
    success "submoduled $git_privaterepo to $ZSH/private"

    sh $ZSH/private/install.sh
    success 'executed private dotfiles repo install script'
  fi
}

# execute our functions
setup_gitconfig
#prepare_ssh_key
# install_xcode_commandline_tools
install_dotfiles
additional_symlinking
#setup_private_repo

# If we're on a Mac, let's install and setup homebrew.
if [ "$(uname -s)" == "Darwin" ]
then
  info "installing dependencies"
  if . bin/dot > /tmp/dotfiles-dot 2>&1
  then
    success "dependencies installed"
  else
    fail "error installing dependencies"
  fi
fi

echo ''
echo ' setting login shell to zsh '
sudo sh -c "echo '/usr/local/bin/zsh'" >> /etc/shells
chsh -s /usr/local/bin/zsh
echo '  All installed!'
