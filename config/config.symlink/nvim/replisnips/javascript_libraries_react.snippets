# ===============================================
# Components declarations
# ===============================================
snippet comp "React component" b
import React, { Component, PropTypes } from 'react';

class $1 extends Component {
	constructor(props) {
		super(props);$2
	}

	render() {
		return (
			${3:<div>Hello World</div>}
		);
	}
}

$1.propTypes = {};
$1.defaultProps = {};
$1.contextTypes = {};

export default $1;
endsnippet

snippet fcomp "React stateless, functional component" b
import React, { PropTypes } from 'react';

function ${1:Component}(props) {
	return (
		${2:<div>Hello</div>}
	);
}

$1.propTypes = {};
$1.defaultProps = {};
$1.contextTypes = {};

export default $1;
endsnippet

# ===============================================
# Prop types and default props, context
# ===============================================
snippet propt "prop types definition" w
propTypes = {
	${1:prop}: ${2:value}
};
endsnippet

snippet dpropt "default prop values" w
defaultProps = {
	${1:prop}: ${2:value}
};
endsnippet

snippet contt "context types definition" w
contextTypes = {
	${1:prop}: ${2:value}
};
endsnippet

snippet prop "one prop type definition" w
PropTypes.${1:object}${2:.isRequired}
endsnippet

snippet gcc "get child context" w
getChildContext() {
	return ({
		${1:name}: ${2:value}
	});
}
endsnippet

# ===============================================
# Component lifecycle functions
# ===============================================
snippet cwm "Component will mount method" b
componentWillMount() {
	$1
}
endsnippet

snippet cdm "Component did mount method" b
componentDidMount() {
	$1
}
endsnippet

snippet cwrp "Component will receive props" b
componentWillReceiveProps(newProps) {
	$1
}
endsnippet

snippet scu "Should Component update" b
shouldComponentUpdate(newProps, newState) {
	$1
}
endsnippet

snippet cwup "Component will update method" b
componentWillUpdate(newProps, newState) {
	$1
}
endsnippet

snippet cdu "Component did update method" b
componentDidUpdate(prevProps, prevState) {
	$1
}
endsnippet

snippet cwu "Component will unmount method" b
componentWillUnmount() {
	$1
}
endsnippet

# ===============================================
# Misc
# ===============================================
snippet p "props"
props.${1:property}
endsnippet

snippet tp "this.props." w
this.props.${1:property}
endsnippet

snippet ts "this.state." w
this.state.${1:property}
endsnippet

snippet tss "this.setState" w
this.setState({
	${1:property}: ${2:value}$0
});
endsnippet

snippet epd "prevent default on event" w
e.preventDefault();
endsnippet

snippet esp "stop propagation on event" w
e.stopPropagation();
endsnippet

# ===============================================
# Classnames library snippets
# ===============================================
snippet cx "classnames (cx) definition"
const ${1:table}Classes = classnames({
	'${2:class}': ${3:condition}
});
endsnippet
