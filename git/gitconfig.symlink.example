[user]
  name = AUTHORNAME
  email = AUTHOREMAIL
  color = auto

[credential]
  helper = GIT_CREDENTIAL_HELPER

[hub]
  protocol = https

[git]
  user = AUTHORUSERNAME

[github]
	user = AUTHORUSERNAME

[diff]
[difftool]
  prompt = false

[help]
  autocorrect = 1

[alias]
  st = status
  ci = commit
  cv = commit -v
  co = checkout
  cl = clone
  di = diff
  dc = diff --cached
  df = diff
  amend = commit --amend
  aa = add --all :/
  ff = merge --ff-only
  pullff = pull --ff-only
  noff = merge --no-ff
  fa = fetch --all
  pom = push origin master
  b = branch
  br = branch
  ds = diff --stat=160,120
  dh1 = diff HEAD~1
  tree = log --graph --pretty=oneline --decorate
  pom = push origin master
  pod = push origin develop
  amend = commit --amend -C HEAD
  undo = reset --soft HEAD^

  # Divergence (commits we added and commits remote added)
  div = divergence

  # Goodness (summary of diff lines added/removed/total)
  gn = goodness
  gnc = goodness --cached

  # Fancy logging.
  #   h = head
  #   hp = head with patch
  #   r = recent commits, only current branch
  #   ra = recent commits, all reachable refs
  #   l = all commits, only current branch
  #   la = all commits, all reachable refs
  head = !git l -1
  h = !git head
  hp = "!. ~/.githelpers && show_git_head"
  r = !git l -30
  ra = !git r --all
  l = "!. ~/.githelpers && pretty_git_log"
  la = !git l --all
  lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
  last = !git log --max-count=1 | awk '{print $2}' | awk 'NR==1{print $1}'

  co = checkout
  promote = !$ZSH/bin/git-promote
  wtf     = !$ZSH/bin/git-wtf
  rank-contributers = !$ZSH/bin/git-rank-contributers
  count   = !git shortlog -sn

  who = shortlog -s -n --no-merges
	standup = shortlog --since=yesterday
	today = shortlog --since=midnight
	uncommit = reset --soft HEAD^
	unamend = reset --soft HEAD@{1}
	subs = submodule foreach git pull origin master
	hist = for-each-ref --count=5 --sort=-committerdate --format='%(refname:short)' refs/heads/
  refresh = !ssh-add -l && STASH=$(git stash) && git fetch && git rebase origin/master && test \"$STASH\" != \"No local changes to save\" && git stash pop
  del = branch -D $1 && push origin --delete $1

[merge]
  tool = vimdiff

[mergetool "vimdiff"]
  keepBackup = false
	cmd = vim -d "$LOCAL" "$MERGED" "$REMOTE"
	trustExitCode = true

[merge "railsschema"]
  name = newer Rails schema version
  driver = "ruby -e '\n\
        system %(git), %(merge-file), %(--marker-size=%L), %(%A), %(%O), %(%B)\n\
        b = File.read(%(%A))\n\
        b.sub!(/^<+ .*\\nActiveRecord::Schema\\.define.:version => (\\d+). do\\n=+\\nActiveRecord::Schema\\.define.:version => (\\d+). do\\n>+ .*/) do\n\
          %(ActiveRecord::Schema.define(:version => #{[$1, $2].max}) do)\n\
        end\n\
        File.open(%(%A), %(w)) {|f| f.write(b)}\n\
        exit 1 if b.include?(%(<)*%L)'"

[color]
	branch = auto
	diff = auto
	status = auto
	interactive = true
  ui = true
  pager = true

[core]
  pager = `brew --prefix git`/share/git-core/contrib/diff-highlight/diff-highlight | less
  whitespace=fix,-indent-with-non-tab,trailing-space,cr-at-eol
	editor = env VIM_MINIMAL=1 NVIM_TUI_ENABLE_TRUE_COLOR=1 nvim +startinsert
  excludesfile = ~/.gitignore

[apply]
  whitespace = fix
  #whitespace = nowarn

[push]
	default = current # or upstream?

[web]
  browser = open

[branch]
  autosetuprebase = always

[rebase]
	autosquash = true
	# for fixup hotness later

[rerere]
 enabled = true
 autoupdate = true
